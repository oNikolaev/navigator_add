#Область ПрограммныйИнтерфейс

#Область УстаревшиеПроцедурыИФункции

// Устарела. Необходимо использовать РаботаВМоделиСервиса.ЭтоРазделеннаяКонфигурация.
// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
//   Булево - Истина, если это разделенная конфигурация.
//
Функция ЭтоРазделеннаяКонфигурация() Экспорт
	
	Если НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = НВ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ЕстьРазделители = МодульРаботаВМоделиСервиса.ЭтоРазделеннаяКонфигурация();
	Иначе
		ЕстьРазделители = Ложь;
	КонецЕсли;
	
	Возврат ЕстьРазделители;
	
КонецФункции

// Устарела. Необходимо использовать РаботаВМоделиСервиса.РазделителиКонфигурации.
// Возвращает массив существующих в конфигурации разделителей.
//
// Возвращаемое значение:
//   ФиксированныйМассив - массив имен общих реквизитов, которые
//     являются разделителями.
//
Функция РазделителиКонфигурации() Экспорт
	
	Если НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = НВ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Разделители = МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
	Иначе
		Разделители = Новый  Массив;
	КонецЕсли;
	
	Возврат Разделители;
	
КонецФункции

// Устарела. Необходимо использовать РаботаВМоделиСервиса.СоставОбщегоРеквизита.
// Возвращает состав общего реквизита с заданным именем.
//
// Параметры:
//   Имя - Строка - Имя общего реквизита.
//
// Возвращаемое значение:
//   СоставОбщегоРеквизита - список объектов метаданных, в которые входит общий реквизит.
//
Функция СоставОбщегоРеквизита(Знач Имя) Экспорт
	
	Если НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = НВ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		СоставОбщегоРеквизита = МодульРаботаВМоделиСервиса.СоставОбщегоРеквизита(Имя);
	Иначе
		СоставОбщегоРеквизита = Неопределено;
	КонецЕсли;
	
	Возврат СоставОбщегоРеквизита;
	
КонецФункции

// Устарела. Необходимо использовать РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных.
// Возвращает признак того, что объект метаданных используется в общих реквизитах-разделителях.
//
// Параметры:
//   ИмяОбъектаМетаданных - Строка - имя объекта,
//   Разделитель - Строка - имя общего реквизита-разделителя, на разделение которыми проверяется объект метаданных.
//
// Возвращаемое значение:
//   Булево - Истина, если это разделенный объект.
//
Функция ЭтоРазделенныйОбъектМетаданных(Знач ИмяОбъектаМетаданных, Знач Разделитель) Экспорт
	
	Если НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = НВ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ЭтоРазделенныйОбъектМетаданных = МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ИмяОбъектаМетаданных);
	Иначе
		ЭтоРазделенныйОбъектМетаданных = Ложь;
	КонецЕсли;
	
	Возврат ЭтоРазделенныйОбъектМетаданных;
	
КонецФункции

// Устарела. Необходимо использовать РаботаВМоделиСервиса.РазделительОсновныхДанных.
// Возвращает имя общего реквизита, который является разделителем основных данных.
//
// Возвращаемое значение:
//   Строка - имя общего реквизита.
//
Функция РазделительОсновныхДанных() Экспорт
	
	Результат = "";
	Если НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = НВ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Результат = МодульРаботаВМоделиСервиса.РазделительОсновныхДанных();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устарела. Необходимо использовать РаботаВМоделиСервиса.РазделительВспомогательныхДанных.
// Возвращает имя общего реквизита, который является разделителем вспомогательных данных.
//
// Возвращаемое значение:
//   Строка - имя общего реквизита.
//
Функция РазделительВспомогательныхДанных() Экспорт
	
	Результат = "";
	Если НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = НВ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Результат = МодульРаботаВМоделиСервиса.РазделительВспомогательныхДанных();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устарела. Необходимо использовать НВ_ОбщегоНазначения.РазделениеВключено.
// Возвращает признак работы в режиме разделения данных по областям
// (технически это признак условного разделения).
// 
// Возвращает Ложь, если конфигурация не может работать в режиме разделения данных
// (не содержит общих реквизитов, предназначенных для разделения данных).
//
// Возвращаемое значение:
//  Булево - Истина, если разделение включено.
//         - Ложь,   если разделение выключено или не поддерживается.
//
Функция РазделениеВключено() Экспорт
	
	Если НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = НВ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		РазделениеВключено = МодульРаботаВМоделиСервиса.РазделениеВключено();
	Иначе
		РазделениеВключено = Ложь;
	КонецЕсли;
	
	Возврат РазделениеВключено;
	
КонецФункции

// Устарела. Необходимо использовать НВ_ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных.
// Возвращает признак возможности обращения к разделенным данным (которые входят в состав разделителей).
// Признак относится к сеансу, но может меняться во время работы сеанса, если разделение было включено
// в самом сеансе, поэтому проверку следует делать непосредственно перед обращением к разделенным данным.
// 
// Возвращает Истина, если конфигурация не может работать в режиме разделения данных
// (не содержит общих реквизитов, предназначенных для разделения данных).
//
// Возвращаемое значение:
//   Булево - Истина, если разделение не поддерживается, либо разделение выключено,
//                    либо разделение включено и разделители    установлены.
//          - Ложь,   если разделение включено и разделители не установлены.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Если НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = НВ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ДоступноИспользованиеРазделенныхДанных = МодульРаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных();
	Иначе
		ДоступноИспользованиеРазделенныхДанных = Истина;
	КонецЕсли;
	
	Возврат ДоступноИспользованиеРазделенныхДанных;
	
КонецФункции

// Устарела. Возвращает объект ПреобразованиеXSL созданный из общего макета с переданным
// именем.
//
// Параметры:
//   ИмяОбщегоМакета - Строка - имя общего макета типа ДвоичныеДанные содержащего
//     файл преобразования XSL.
//
// Возвращаемое значение:
//   ПреобразованиеXSL - объект ПреобразованиеXSL.
//
Функция ПолучитьПреобразованиеXSLИзОбщегоМакета(Знач ИмяОбщегоМакета) Экспорт
	
	ДанныеМакета = ПолучитьОбщийМакет(ИмяОбщегоМакета);
	ИмяФайлаПреобразования = ПолучитьИмяВременногоФайла("xsl");
	ДанныеМакета.Записать(ИмяФайлаПреобразования);
	
	Преобразование = Новый ПреобразованиеXSL;
	Преобразование.ЗагрузитьТаблицуСтилейXSLИзФайла(ИмяФайлаПреобразования);
	
	Попытка
		УдалитьФайлы(ИмяФайлаПреобразования);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение XSL'", НВ_ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Преобразование;
	
КонецФункции

// Устарела. Необходимо использовать РаботаВМоделиСервиса.СеансЗапущенБезРазделителей.
// Определяет, сеанс запущен с разделителями или без.
//
// Возвращаемое значение:
//   Булево - Истина, если сеанс запущен без разделителей.
//
Функция СеансЗапущенБезРазделителей() Экспорт
	
	Если НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = НВ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
	Иначе
		СеансЗапущенБезРазделителей = Истина;
	КонецЕсли;
	
	Возврат СеансЗапущенБезРазделителей;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает Истина, если программа работает в режиме автономного рабочего места.
Функция ЭтоАвтономноеРабочееМесто() Экспорт
	
	Если Не НВ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульОбменДаннымиСервер = НВ_ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
	
	Возврат МодульОбменДаннымиСервер.ЭтоАвтономноеРабочееМесто();
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры, применяемых к элементам командного интерфейса, связанным с параметрическими функциональными опциями.
Функция ОпцииИнтерфейса() Экспорт 
	
	ОпцииИнтерфейса = Новый Структура;
	Возврат Новый ФиксированнаяСтруктура(ОпцииИнтерфейса);
	
КонецФункции

#КонецОбласти
