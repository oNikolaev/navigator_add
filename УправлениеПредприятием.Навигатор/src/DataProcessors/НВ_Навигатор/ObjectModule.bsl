Перем мСоответствиеКартинок;
Перем мСоответствиеИменСвойствТиповКоллекций;

#Область Методы

#Область Процедуры

Процедура ДобавитьВИзбранное(Ссылка) Экспорт
	
	стр_ИзбранныеЭлементы = ИзбранныеЭлементы.Добавить();
	стр_ИзбранныеЭлементы.ИдЗаписи      = Новый УникальныйИдентификатор();
	стр_ИзбранныеЭлементы.Ссылка        = Ссылка;
	стр_ИзбранныеЭлементы.Представление = Ссылка;
	
КонецПроцедуры

Процедура ДобавитьПользователейБазы(СтруктураМетаданных)
	
	ИмяКоллекции = "Пользователи";
	ИмяЭлементаКоллекции = "Пользователь";
	
	НомерКартинки = 49;
	
	стр_Коллекция = СтруктураМетаданных.Строки.Добавить();
	
	стр_Коллекция.ИмяКоллекции         = ИмяКоллекции;
	стр_Коллекция.ИмяЭлементаКоллекции = ИмяЭлементаКоллекции;
	стр_Коллекция.Имя                  = ИмяКоллекции;
	стр_Коллекция.Представление        = ИмяКоллекции;
	стр_Коллекция.Синоним              = ИмяКоллекции;
	стр_Коллекция.НомерКартинки        = НомерКартинки;
	стр_Коллекция.ТипЗаписи            = "КоллекцияОбъектовМетаданных";
	
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для каждого ПользовательБазы Из ВсеПользователи Цикл
		
		стр_ОбъектМетаданных = стр_Коллекция.Строки.Добавить();
		стр_ОбъектМетаданных.ИмяКоллекции         = ИмяКоллекции;
		стр_ОбъектМетаданных.ИмяЭлементаКоллекции = ИмяЭлементаКоллекции;
		стр_ОбъектМетаданных.Имя                  = ПользовательБазы.Имя;
		стр_ОбъектМетаданных.Представление        = ПользовательБазы.Имя;
		стр_ОбъектМетаданных.Синоним              = ПользовательБазы.ПолноеИмя;
		стр_ОбъектМетаданных.ТипЗаписи            = "ПользовательИнформационнойБазы";
		стр_ОбъектМетаданных.НомерКартинки        = НомерКартинки;
		
	КонецЦикла;
	
	стр_Коллекция.Строки.Сортировать("Имя");
	
КонецПроцедуры

Процедура ДобавитьКоллекциюОбъектовМетаданных(КоллекцияХраненияМД, СвойстваКоллекции, ПараметрыФормирования = Неопределено)
	
	ИмяКоллекции = СвойстваКоллекции.ИмяКоллекции;
	
	стр_ГруппаМД = Неопределено;
	
	ЧастиИмени = РазложитьСтрокуВМассивПодстрок(ИмяКоллекции, ".");
	
	Если ЧастиИмени.Количество() > 1 Тогда
		
		ИмяГруппы    = ЧастиИмени[0]; // "Общие"
		ИмяКоллекции = ЧастиИмени[1]; // "Картинки"
		
		СтрокиКоллекцииХраненияМД = КоллекцияХраненияМД.Строки.НайтиСтроки(Новый Структура("ТипЗаписи, Имя", "ГруппаКоллекцийОбъектовМетаданных", ИмяГруппы));
		
		Если СтрокиКоллекцииХраненияМД.Количество() = 0 Тогда
			
			стр_ГруппаМД = КоллекцияХраненияМД.Строки.Добавить();
			стр_ГруппаМД.ТипЗаписи            = "ГруппаКоллекцийОбъектовМетаданных";
			стр_ГруппаМД.ИмяКоллекции         = ИмяГруппы;
			стр_ГруппаМД.ИмяЭлементаКоллекции = ИмяГруппы;
			стр_ГруппаМД.Имя                  = ИмяГруппы;
			стр_ГруппаМД.Представление        = ИмяГруппы;
			стр_ГруппаМД.Синоним              = ИмяГруппы;
			стр_ГруппаМД.НомерКартинки        = 2;
			
		Иначе
			стр_ГруппаМД = СтрокиКоллекцииХраненияМД[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если стр_ГруппаМД = Неопределено Тогда
		стр_КоллекцияМД = КоллекцияХраненияМД.Строки.Добавить();
	Иначе
		стр_КоллекцияМД = стр_ГруппаМД.Строки.Добавить();
	КонецЕсли;
	
	стр_КоллекцияМД.ТипЗаписи            = "КоллекцияОбъектовМетаданных";
	стр_КоллекцияМД.ИмяКоллекции         = ИмяКоллекции;
	стр_КоллекцияМД.ИмяЭлементаКоллекции = СвойстваКоллекции.ИмяЭлементаКоллекции;
	стр_КоллекцияМД.Имя                  = ИмяКоллекции;
	стр_КоллекцияМД.Представление        = ИмяКоллекции;
	стр_КоллекцияМД.Синоним              = СвойстваКоллекции.СинонимКоллекции;
	стр_КоллекцияМД.НомерКартинки        = СвойстваКоллекции.НомерКартинки;
	
	//
	
	Если ИмяКоллекции = "Подсистемы" Тогда
		
		Для каждого Подсистема Из Метаданные[ИмяКоллекции] Цикл
			ДобавитьСведенияОПодсистеме(стр_КоллекцияМД, СвойстваКоллекции, Подсистема, ПараметрыФормирования);
		КонецЦикла;
		
	Иначе
		
		Для каждого ОбъектМетаданных Из Метаданные[ИмяКоллекции] Цикл
			
			//
			
			ДобавлятьОбъектМД = Ложь;
			
			Если Не (ПараметрыФормирования = Неопределено) Тогда
				
				Для каждого ЭлементОтбора Из ПараметрыФормирования.Отбор Цикл
					
					Если ЭлементОтбора.ИмяПоля = "Имя" Тогда
						
						Если Найти(ВРег(ОбъектМетаданных.Имя), ВРег(ЭлементОтбора.ЗначениеОтбора)) > 0 Тогда
							ДобавлятьОбъектМД = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЭлементОтбора.ИмяПоля = "Синоним" Тогда
						
						Если Найти(ВРег(ОбъектМетаданных.Синоним), ВРег(ЭлементОтбора.ЗначениеОтбора)) > 0 Тогда
							ДобавлятьОбъектМД = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЭлементОтбора.ИмяПоля = "Комментарий" Тогда
						
						Если Найти(ВРег(ОбъектМетаданных.Комментарий), ВРег(ЭлементОтбора.ЗначениеОтбора)) > 0 Тогда
							ДобавлятьОбъектМД = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				ДобавлятьОбъектМД = Истина;
			КонецЕсли;
			
			Если Не ДобавлятьОбъектМД Тогда
				Продолжить;
			КонецЕсли;
			
			//
			
			ПолноеИмя = ПодставитьПараметрыВСтроку("%1.%2", СвойстваКоллекции.ИмяЭлементаКоллекции, ОбъектМетаданных.Имя);
			
			стр_ОбъектМД = стр_КоллекцияМД.Строки.Добавить();
			стр_ОбъектМД.ИмяКоллекции         = ИмяКоллекции;
			стр_ОбъектМД.ИмяЭлементаКоллекции = СвойстваКоллекции.ИмяЭлементаКоллекции;
			стр_ОбъектМД.Имя                  = ОбъектМетаданных.Имя;
			стр_ОбъектМД.Представление        = ОбъектМетаданных.Имя;
			стр_ОбъектМД.Синоним              = ОбъектМетаданных.Синоним;
			стр_ОбъектМД.Комментарий          = ОбъектМетаданных.Комментарий;
			стр_ОбъектМД.ТипЗаписи            = "ОбъектМетаданных";
			стр_ОбъектМД.НомерКартинки        = СвойстваКоллекции.НомерКартинки;
			стр_ОбъектМД.ПолноеИмя            = ПолноеИмя;
			
		КонецЦикла;
		
		Если стр_КоллекцияМД.Строки.Количество() = 0 Тогда
			
			Если стр_ГруппаМД = Неопределено Тогда
				КоллекцияХраненияМД.Строки.Удалить(стр_КоллекцияМД);
			Иначе
				стр_ГруппаМД.Строки.Удалить(стр_КоллекцияМД);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСвязиПоВладельцам(ОбъектМД)
	
	#Область Предусловия
	
	Если Не ЭтоСправочник(ОбъектМД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектМД.Владельцы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Для каждого ОбъектМдВладелец Из ОбъектМД.Владельцы Цикл
		
		стр_СвязиПоВладельцам = СвязиПоВладельцам.Добавить();
		стр_СвязиПоВладельцам.ИмяОбъекта            = ОбъектМдВладелец.ПолноеИмя();
		стр_СвязиПоВладельцам.ЯвляетсяВладельцемДля = ОбъектМД.ПолноеИмя();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСведенияОПодсистеме(стр_Коллекция, СвойстваКоллекции, Подсистема, ПараметрыФормирования)
	
	//
	
	ДобавлятьОбъектМД = Ложь;
	
	Если Не (ПараметрыФормирования = Неопределено) Тогда
		
		Для каждого ЭлОтбора Из ПараметрыФормирования.Отбор Цикл
			
			Если ЭлОтбора.ИмяПоля = "Имя" Тогда
				
				Если Найти(ВРег(Подсистема.Имя), ВРег(ЭлОтбора.ЗначениеОтбора)) > 0 Тогда
					ДобавлятьОбъектМД = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ДобавлятьОбъектМД = Истина;
	КонецЕсли;
	
	Если Подсистема.Подсистемы.Количество() > 0 Тогда
		ДобавлятьОбъектМД = Истина;
	КонецЕсли;
	
	//
	
	Если ДобавлятьОбъектМД Тогда
		
		стр_Подсистема = стр_Коллекция.Строки.Добавить();
		стр_Подсистема.ИмяКоллекции         = "Подсистемы";
		стр_Подсистема.ИмяЭлементаКоллекции = СвойстваКоллекции.ИмяЭлементаКоллекции;
		стр_Подсистема.Имя                  = Подсистема.Имя;
		стр_Подсистема.Представление        = Подсистема.Имя;
		стр_Подсистема.Синоним              = Подсистема.Синоним;
		стр_Подсистема.Комментарий          = Подсистема.Комментарий;
		стр_Подсистема.ТипЗаписи            = "ОбъектМетаданных";
		стр_Подсистема.НомерКартинки        = СвойстваКоллекции.НомерКартинки;
		
	КонецЕсли;
	
	Если Подсистема.Подсистемы.Количество() > 0 Тогда
		
		Для каждого ВлжПодсистема Из Подсистема.Подсистемы Цикл
			ДобавитьСведенияОПодсистеме(стр_Подсистема, СвойстваКоллекции, ВлжПодсистема, ПараметрыФормирования);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не (ПараметрыФормирования = Неопределено) Тогда
		
		Если Не (стр_Подсистема = Неопределено) Тогда
			
			Если (стр_Подсистема.Строки.Количество() = 0) И (Подсистема.Подсистемы.Количество() > 0) Тогда
				стр_Коллекция.Строки.Удалить(стр_Подсистема);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(ОписаниеКоллекции, ИмяКоллекции, ИмяЭлементаКоллекции, СинонимКоллекции, НомерКартинки = 0)
	
	СтрокаТбл = ОписаниеКоллекции.Добавить();
	СтрокаТбл.ИмяКоллекции         = ИмяКоллекции;
	СтрокаТбл.ИмяЭлементаКоллекции = ИмяЭлементаКоллекции;
	СтрокаТбл.СинонимКоллекции     = СинонимКоллекции;
	СтрокаТбл.НомерКартинки        = НомерКартинки;
	
КонецПроцедуры

// Добавляет имя объекта метаданных в перечень корреспондирующих полей регистра бухгалтерии.
//
// Параметры:
//	КоррПоля             - Структура, описание корреспондирующих полей регистра бухгалтерии (См. Тип_КоррПоляРегистраБухгалтерии()). 
//	ИмяПеречня           - Строка, имя перечня полей (например: "Измерения"). 
//	ИмяОбъектаМетаданных - Строка, имя объекта метаданных (например: "Организация").
//
Процедура ЗапомнитьКоррПолеРегистраБухгалтерии(КоррПоля, ИмяПеречня, ИмяОбъектаМетаданных)
	
	Если КоррПоля[ИмяПеречня].Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
		КоррПоля[ИмяПеречня].Добавить(ИмяОбъектаМетаданных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеКартинок()
	
	мСоответствиеКартинок = Новый Соответствие;
	мСоответствиеКартинок.Вставить("Пользователь", 0);
	мСоответствиеКартинок.Вставить("Конфигурация", 1);
	мСоответствиеКартинок.Вставить("ОбщиеОбъекты", 2);
	мСоответствиеКартинок.Вставить("Константа", 3);
	мСоответствиеКартинок.Вставить("Справочник", 4);
	мСоответствиеКартинок.Вставить("Документ", 5);
	мСоответствиеКартинок.Вставить("ЖурналДокументов", 6);
	мСоответствиеКартинок.Вставить("Перечисление", 7);
	мСоответствиеКартинок.Вставить("Отчет", 8);
	мСоответствиеКартинок.Вставить("Обработка", 9);
	мСоответствиеКартинок.Вставить("ПланВидовХарактеристик", 10);
	мСоответствиеКартинок.Вставить("ПланСчетов", 11);
	мСоответствиеКартинок.Вставить("ПланВидовРасчета", 12);
	мСоответствиеКартинок.Вставить("РегистрСведений", 13);
	мСоответствиеКартинок.Вставить("РегистрНакопления", 14);
	мСоответствиеКартинок.Вставить("РегистрБухгалтерии", 15);
	мСоответствиеКартинок.Вставить("РегистрРасчета", 16);
	мСоответствиеКартинок.Вставить("БизнесПроцесс", 17);
	мСоответствиеКартинок.Вставить("Задача", 18);
	мСоответствиеКартинок.Вставить("ВнешнийИсточникДанных", 19);
	мСоответствиеКартинок.Вставить("Подсистема", 20);
	мСоответствиеКартинок.Вставить("ОбщийМодуль", 21);
	мСоответствиеКартинок.Вставить("ПараметрСеанса", 22);
	мСоответствиеКартинок.Вставить("Роль", 23);
	мСоответствиеКартинок.Вставить("ОбщиеРеквизиты", 24);
	мСоответствиеКартинок.Вставить("ПланыОбмена", 25);
	мСоответствиеКартинок.Вставить("КритерииОтбора", 26);
	мСоответствиеКартинок.Вставить("ПодпискиНаСобытия", 27);
	мСоответствиеКартинок.Вставить("РегламентныеЗадания", 28);
	мСоответствиеКартинок.Вставить("ФункциональныеОпции", 29);
	мСоответствиеКартинок.Вставить("ПараметрыФункциональныхОпций", 30);
	мСоответствиеКартинок.Вставить("ОпределяемыеТипы", 31);
	мСоответствиеКартинок.Вставить("ХранилищаНастроек", 32);
	мСоответствиеКартинок.Вставить("ОбщиеФормы", 33);
	мСоответствиеКартинок.Вставить("ОбщиеКоманды", 34);
	мСоответствиеКартинок.Вставить("ГруппыКоманд", 35);
	мСоответствиеКартинок.Вставить("ОбщиеМакеты", 36);
	мСоответствиеКартинок.Вставить("ОбщиеКартинки", 37);
	мСоответствиеКартинок.Вставить("XDTOПакеты", 38);
	мСоответствиеКартинок.Вставить("WebСервисы", 39);
	мСоответствиеКартинок.Вставить("HTTPСервисы", 40);
	мСоответствиеКартинок.Вставить("WSСсылки", 41);
	мСоответствиеКартинок.Вставить("ЭлементыСтиля", 42);
	мСоответствиеКартинок.Вставить("Язык", 43);
	мСоответствиеКартинок.Вставить("СтандартныйРеквизит", 44);
	мСоответствиеКартинок.Вставить("Реквизит", 45);
	мСоответствиеКартинок.Вставить("ТабичнаяЧасть", 46);
	мСоответствиеКартинок.Вставить("Измерение", 47);
	мСоответствиеКартинок.Вставить("Ресурс", 48);
	мСоответствиеКартинок.Вставить("Пользователь", 49);
	мСоответствиеКартинок.Вставить("СистемныеРеквизиты", 50);
	мСоответствиеКартинок.Вставить("СистемныйРеквизит", 51);
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеИменСвойствТиповКоллекций()
	
	мСоответствиеИменСвойствТиповКоллекций = Новый Соответствие();
	
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Подсистема", "Подсистемы");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ОбщийМодуль", "ОбщиеМодули");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ПараметрСеанса", "ПараметрыСеанса");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Роль", "Роли");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ОбщийРеквизит", "ОбщиеРеквизиты");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("КритерийОтбора", "КритерииОтбора");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ПодпискаНаСобытие", "ПодпискиНаСобытия");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("РегламентноеЗадание", "РегламентныеЗадания");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ФункциональнаяОпция", "ФункциональныеОпции");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ПараметрФункциональныхОпций", "ПараметрыФункциональныхОпций");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ОпределяемыйТип", "ОпределяемыеТипы");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ХранилищеНастроек", "ХранилищаНастроек");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ОбщаяФорма", "ОбщиеФормы");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ОбщаяКоманда", "ОбщиеКоманды");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ГруппаКоманд", "ГруппыКоманд");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ОбщийМакет", "ОбщиеМакеты");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ОбщаяКартинка", "ОбщиеКартинки");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ПакетXDTO", "ПакетыXDTO");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ВебСервис", "ВебСервисы");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("HTTPСервис", "HTTPСервисы");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("WSСсылка", "WSСсылки");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ЭлеметСтиля", "ЭлементыСтиля");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Стиль", "Стили");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Язык", "Языки");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Константа", "Константы");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Справочник", "Справочники");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Документ", "Документы");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ЖурналДокументов", "ЖурналыДокументов");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Перечисление", "Перечисления");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Отчет", "Отчеты");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Обработка", "Обработки");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ПланСчетов", "ПланыСчетов");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ПланВидовРасчета", "ПланыВидовРасчета");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("РегистрСведений", "РегистрыСведений");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("РегистрНакопления", "РегистрыНакопления");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("РегистрРасчета", "РегистрыРасчета");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("БизнесПроцесс", "БизнесПроцессы");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("Задача", "Задачи");
	мСоответствиеИменСвойствТиповКоллекций.Вставить("ВнешнийИсточникДанных", "ВнешниеИсточникиДанных");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыСтруктурыМетаданных()
	
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		
		ДобавитьСвязиПоВладельцам(ОбъектМД);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Функции

// Позволяет определить, есть ли среди реквизитов объекта реквизит с переданным именем.
//
// Параметры:
//	ИмяРеквизита - Строка - имя реквизита;
//	МетаданныеОбъекта - ОбъектМетаданных - объект, в котором требуется проверить наличие реквизита.
//
// Возвращаемое значение:
//	Булево - Истина, если есть.
//
Функция ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Экспорт
	
	Возврат Не (МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	
КонецФункции

// Позволяет определить, есть ли среди стандартных реквизитов объекта реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита;
//  МетаданныеОбъекта - ОбъектМетаданных - объект, в котором требуется проверить наличие реквизита.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьСтандартныйРеквизитОбъекта(ИмяРеквизита, ОбъектМд) Экспорт
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбъектМд = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	ЕстьСтРеквизит = Ложь;
	
	Для каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
		
		Если ВРег(СтРеквизит.Имя) = ВРег(ИмяРеквизита) Тогда
			ЕстьСтРеквизит = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьСтРеквизит;
	
КонецФункции

// Дерево структуры метаданных конфигурации информационной базы.
//
// Параметры:
//	ПараметрыФормирования - Структура - параметры формирования структуры метаданных, см. Тип_ПараметрыФормированияСтруктурыМетаданных().
//
// Возвращаемое значение:
//	ДеревоЗначений - см. Тип_СтруктураМетаданныхКонфигурации().
//
Функция СтруктураМетаданныхКонфигурации(ПараметрыФормирования = Неопределено) Экспорт
	
	ДеревоМД = Тип_СтруктураМетаданныхКонфигурации();
	ДеревоМД.Строки.Очистить();
	
	//
	
	ВсеКоллекции = ВсеКоллекцииОбъектовМетаданных();
	
	Для каждого Коллекция Из ВсеКоллекции Цикл
		
		ДобавитьКоллекциюОбъектовМетаданных(ДеревоМД, Коллекция, ПараметрыФормирования);
		
	КонецЦикла;
	
	Результат = ДеревоМД;
	
	Возврат Результат;
	
КонецФункции

Функция ИменаПодчиненныхОбъектов(ИмяОбъекта) Экспорт
	
	Результат = Новый Массив;
	ПустойРезультат = Новый Массив;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяОбъекта) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	СвязиПоВладельцамСтроки = СвязиПоВладельцам.НайтиСтроки(Новый Структура("ИмяОбъекта", ИмяОбъекта));
	
	Если СвязиПоВладельцамСтроки.Количество() = 0 Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Для каждого стр_СвязиПоВладельцам Из СвязиПоВладельцамСтроки Цикл
		Результат.Добавить(стр_СвязиПоВладельцам.ЯвляетсяВладельцемДля);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяТекущейФормы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФормыОбработки) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЧастиСтроки = РазложитьСтрокуВМассивПодстрок(ИмяТекущейФормы, ".");
	
	Результат = ПодставитьПараметрыВСтроку("%1.%2.%3.%4", ЧастиСтроки[0], ЧастиСтроки[1], ЧастиСтроки[2], ИмяФормыОбработки);
	
	Возврат Результат;
	
КонецФункции

Функция КраткаяИнформацияОКонфигурации() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Результат = ПодставитьПараметрыВСтроку(
		"%1 (%2), платформа %3", 
		Метаданные.КраткаяИнформация, 
		Метаданные.Версия, 
		СистемнаяИнформация.ВерсияПриложения
	);
	
	Возврат Результат;
	
КонецФункции

// Можно отображать список элементов коллекции.
//
// Параметры:
//	ИмяКоллекции - Строка, имя коллекции объектов метаданных (например: "Справочники").
//
// Возвращаемое значение:
// 	Булево. Истина, отображение списка элементов доступно. Ложь, нет.
//
Функция ОтображениеСпискаЭлементовКоллекцииДоступно(ИмяКоллекции) Экспорт
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяКоллекции) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ИмяКоллекции = "Отчеты" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяКоллекции = "Обработки" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Элемент коллекции - это обработка или отчет.
//
// Параметры:
//	ИмяКоллекции - Строка - имя коллекции объектов метаданных, например: "Отчеты", "Обработки".
//
// Возвращаемое значение:
//	Тип: Булево
//	Для элемента коллекции доступно открытие основной формы.
//
Функция ЭлементКоллекцииЯвляетсяСредствомОбработкиДанных(ИмяКоллекции) Экспорт
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяКоллекции) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ИмяКоллекции = "Отчеты" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяКоллекции = "Обработки" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет имя основной формы объекта - отчета или обработки.
//
// Параметры:
//	СвойстваОбъекта - Структура - свойства объекта, см. Тип_СвойстваОбъектаОбработкиДанных().
//
// Возвращаемое значение:
//	Тип: Строка
//	Имя основной формы объекта обработки данных, например: "Отчет.АА_БанковскиеГарантии.Форма.ФормаОтчета".
//
Функция ИмяОсновнойФормыОбъектаОбработкиДанных(СвойстваОбъекта) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если СвойстваОбъекта = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	ОсновнаяФормаОбработки = Метаданные[СвойстваОбъекта.ИмяКоллекции][СвойстваОбъекта.Имя].ОсновнаяФорма;
	
	Если ОсновнаяФормаОбработки = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяОсновнойФормы = ОсновнаяФормаОбработки.Имя;
	
	Если ИмяОсновнойФормы = "ФормаОтчета" Тогда
		ПолноеИмяОсновнойФормыОбъекта = ПодставитьПараметрыВСтроку("%1.%2.%3", СвойстваОбъекта.ИмяЭлементаКоллекции, СвойстваОбъекта.Имя, "Форма");
	Иначе
		ПолноеИмяОсновнойФормыОбъекта = ПодставитьПараметрыВСтроку("%1.%2.Форма.%3", СвойстваОбъекта.ИмяЭлементаКоллекции, СвойстваОбъекта.Имя, ИмяОсновнойФормы);
	КонецЕсли;
	
	Результат = ПолноеИмяОсновнойФормыОбъекта;
	
	Возврат Результат;
	
КонецФункции

// Имя основной таблицы элементов объекта метаданных.
//
// Параметры:
//	ИмяКоллекцииМетаданных - Строка, имя коллекции объекта метаданных (например: "Справочник"). 
//	ИмяОбъектаМетаданных   - Строка, имя объекта метаданных (например: "Номенклатура").
//
// Возвращаемое значение:
//	Строка. Имя основной таблицы списка элементов объекта метаданных (например: "Справочник.Номенклатура").
//	
Функция ИмяОсновнойТаблицыЭлементовОбъектаМетаданных(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяКоллекцииМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = ПодставитьПараметрыВСтроку("%1.%2", ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);
	
	Возврат Результат;
	
КонецФункции

// Структура параметров списка элементов объекта метаданных.
//
// Параметры:
//	ИмяКоллекции         - Строка, имя коллекции объектов метаданных (например: "Справочники").
//	ИмяОбъектаМетаданных - Строка, имя объекта метаданных (например: "Номенклатура").
//
// Возвращаемое значение:
//	Структура. Параметры колонок списка элементов.
//
Функция ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(ИмяКоллекции, ИмяОбъектаМетаданных) Экспорт
	
	Результат = Новый Структура;
	ПустойРезультат = Неопределено;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяКоллекции) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Попытка
		ОбъектМд = Метаданные[ИмяКоллекции][ИмяОбъектаМетаданных];
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	#КонецОбласти
	
	Если ИмяКоллекции = "ПланыОбмена" Тогда
		
		// Стандартные реквизиты
		СтандартныеРеквизиты = Новый Массив;
		
		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];
		
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		
		Если ОбъектМд.ДлинаКода > 0 Тогда
			
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЕсли;
		
		Если ОбъектМд.ДлинаНаименования > 0 Тогда
			
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЕсли;
		
		// ... остальные стандартные реквизиты.
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;
			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;
			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			ВидимостьРеквизита = Истина;
			
			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		// Реквизиты
		Реквизиты = Новый Массив;
		
		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, СтРеквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "Справочники" Тогда
		
		// Стандартные реквизиты.
		
		СтандартныеРеквизиты = Новый Массив;
		
		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];
		
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		
		Если ОбъектМд.ДлинаКода > 0 Тогда
			
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЕсли;
		
		Если ОбъектМд.ДлинаНаименования > 0 Тогда
			
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЕсли;
		
		// ... остальные стандартные реквизиты.
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			ВидимостьРеквизита = Истина;
			
			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		// Реквизиты.
		
		Реквизиты = Новый Массив;
		
		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "Перечисления" Тогда
		
		СтандартныеРеквизиты = Новый Массив;
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "Документы" Тогда
		
		// Стандартные реквизиты.
		
		ИменаСтРеквизитов = Новый Массив;
		ИменаСтРеквизитов.Добавить("Ссылка");
		ИменаСтРеквизитов.Добавить("Дата");
		ИменаСтРеквизитов.Добавить("Номер");
		
		СтандартныеРеквизиты = Новый Массив;
		
		Для каждого ИмяСтРеквизита Из ИменаСтРеквизитов Цикл
			
			Если ЕстьСтандартныйРеквизитОбъекта(ИмяСтРеквизита, ОбъектМд) Тогда
				
				СтРеквизит = ОбъектМд.СтандартныеРеквизиты[ИмяСтРеквизита];
				
				ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(
					СтРеквизит.Имя, 
					СтРеквизит.Синоним, 
					СтРеквизит.Комментарий, 
					СтРеквизит.Тип, 
					Истина
				);
				
				СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			Если СтРеквизит.Имя = "Номер" Тогда
				Продолжить;
			ИначеЕсли СтРеквизит.Имя = "Дата" Тогда
				Продолжить;
			ИначеЕсли СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			ВидимостьРеквизита = Истина;
			
			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Проведен" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Реквизиты = Новый Массив;
		
		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "РегистрыБухгалтерии" Тогда
		
		Результат = Новый Структура;
		
		СтандартныеРеквизиты = Новый Массив;
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Измерения = Новый Массив;
		
		Для каждого Измерение Из ОбъектМд["Измерения"] Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(
				Измерение.Имя, 
				Измерение.Синоним, 
				Измерение.Комментарий, 
				Измерение.Тип, 
				Истина
			);
			
			Измерения.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Ресурсы = Новый Массив;
		
		Для каждого Ресурс Из ОбъектМд["Ресурсы"] Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(
				Ресурс.Имя, 
				Ресурс.Синоним, 
				Ресурс.Комментарий, 
				Ресурс.Тип, 
				Истина
			);
			
			Ресурсы.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Реквизиты = Новый Массив;
		
		Для каждого Реквизит Из ОбъектМд["Реквизиты"] Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(
				Реквизит.Имя, 
				Реквизит.Синоним, 
				Реквизит.Комментарий, 
				Реквизит.Тип, 
				Ложь
			);
			
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		// Счета
		// Виды субконто
		
		// TODO: Взять из формы редактора объекта функцию формирования параметров
		// колонок для регистра бухгалтерии. Вообще, они должны быть универсальными.
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Измерения", Измерения);
		Результат.Вставить("Ресурсы", Ресурсы);
		Результат.Вставить("Реквизиты", Реквизиты);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "РегистрыСведений" Или ИмяКоллекции = "РегистрыНакопления" Или ИмяКоллекции = "РегистрыРасчета" Тогда
		
		Результат = Новый Структура;
		
		СтандартныеРеквизиты = Новый Массив;
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Измерения = Новый Массив;
		
		Для каждого СтРеквизит Из ОбъектМд["Измерения"] Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			Измерения.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Ресурсы = Новый Массив;
		
		Для каждого СтРеквизит Из ОбъектМд["Ресурсы"] Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			Ресурсы.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Реквизиты = Новый Массив;
		
		Для каждого СтРеквизит Из ОбъектМд["Реквизиты"] Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Перерасчеты = Новый Массив;
		
		Попытка
			
			Для каждого СтРеквизит Из ОбъектМд["Перерасчеты"] Цикл
				
				ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
				Реквизиты.Добавить(ПараметрыКолонки);
				
			КонецЦикла;
			
		Исключение
			//
		КонецПопытки;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Измерения", Измерения);
		Результат.Вставить("Ресурсы", Ресурсы);
		Результат.Вставить("Реквизиты", Реквизиты);
		Результат.Вставить("Перерасчеты", Перерасчеты);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "ЖурналыДокументов" Тогда
		
		СтандартныеРеквизиты = Новый Массив;
		
		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Дата"];
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		
		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Номер"];
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		
		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			ВидимостьРеквизита = Истина;
			
			Если СтРеквизит.Имя = "Номер" Тогда
				Продолжить;
			ИначеЕсли СтРеквизит.Имя = "Дата" Тогда
				Продолжить;
			ИначеЕсли СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Проведен" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Графы = Новый Массив;
		
		Для каждого ГрафаЖурнала Из ОбъектМд["Графы"] Цикл
			
			ТипГрафы = Неопределено;
			
			Попытка
				Для каждого СоставГрафы Из ГрафаЖурнала.Ссылки Цикл
					ТипГрафы = СоставГрафы.Тип;
				КонецЦикла;
			Исключение
				Продолжить;
			КонецПопытки;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(
				ГрафаЖурнала.Имя, 
				ГрафаЖурнала.Синоним, 
				ГрафаЖурнала.Комментарий, 
				ТипГрафы, 
				Истина
			);
			
			Графы.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Графы", Графы);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "ПланыСчетов" Тогда
		
		СтандартныеРеквизиты = Новый Массив;
		
		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];
		
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		
		Если ОбъектМд.ДлинаКода > 0 Тогда
			
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЕсли;
		
		Если ОбъектМд.ДлинаНаименования > 0 Тогда
			
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЕсли;
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;
			
			ВидимостьРеквизита = Истина;
			
			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Реквизиты = Новый Массив;
		
		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "ПланыВидовРасчета" Тогда
		
		СтандартныеРеквизиты = Новый Массив;
		
		Если ОбъектМд.ДлинаКода > 0 Тогда
			
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЕсли;
		
		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];
		
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		
		Если ОбъектМд.ДлинаНаименования > 0 Тогда
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		КонецЕсли;
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			ВидимостьРеквизита = Истина;
			
			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ПериодДействияБазовый" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Реквизиты = Новый Массив;
		
		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, СтРеквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "ПланыВидовХарактеристик" Тогда
		
		СтандартныеРеквизиты = Новый Массив;
		
		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];
		
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		
		Если ОбъектМд.ДлинаКода > 0 Тогда
			
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Код"];
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЕсли;
		
		Если ОбъектМд.ДлинаНаименования > 0 Тогда
			
			СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Наименование"];
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Ложь);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЕсли;
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			Если СтРеквизит.Имя = "Код" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "Наименование" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			ВидимостьРеквизита = Истина;
			
			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ТипЗначения" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Реквизиты = Новый Массив;
		
		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "Задачи" Тогда
		
		СтандартныеРеквизиты = Новый Массив;
		
		СтРеквизит = ОбъектМд.СтандартныеРеквизиты["Ссылка"];
		
		ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, Истина);
		СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			Если СтРеквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			ВидимостьРеквизита = Истина;
			
			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Предопределенный" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "ЭтоГруппа" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Родитель" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Владелец" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Выполнена" Тогда
				ВидимостьРеквизита = Ложь;
			ИначеЕсли СтРеквизит.Имя = "Наименование" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Реквизиты = Новый Массив;
		
		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		РеквизитыАдресации = Новый Массив;
		
		Для Каждого Реквизит Из ОбъектМд.РеквизитыАдресации Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			РеквизитыАдресации.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);
		Результат.Вставить("РеквизитыАдресации", РеквизитыАдресации);
		
	КонецЕсли;
	
	Если ИмяКоллекции = "БизнесПроцессы" Тогда
		
		СтандартныеРеквизиты = Новый Массив;
		
		Для Каждого СтРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
			
			ВидимостьРеквизита = Истина;
			
			Если СтРеквизит.Имя = "ПометкаУдаления" Тогда
				ВидимостьРеквизита = Ложь;
			КонецЕсли;
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(СтРеквизит.Имя, СтРеквизит.Синоним, СтРеквизит.Комментарий, СтРеквизит.Тип, ВидимостьРеквизита);
			СтандартныеРеквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Реквизиты = Новый Массив;
		
		Для Каждого Реквизит Из ОбъектМд.Реквизиты Цикл
			
			ПараметрыКолонки = Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(Реквизит.Имя, Реквизит.Синоним, Реквизит.Комментарий, Реквизит.Тип, Ложь);
			Реквизиты.Добавить(ПараметрыКолонки);
			
		КонецЦикла;
		
		Результат.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
		Результат.Вставить("Реквизиты", Реквизиты);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив имен табличных частей объекта метаданных.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных, объект метаданных конфигурации.
//
// Возвращаемое значение:
//	Массив. Массив элементов типа Строка, имена табличных чатей объекта метаданных.
//	
Функция ИменаТабличныхЧастейОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	Результат = Новый Массив;
	ПустойРезультат = Новый Массив;
	
	#Область Предусловия
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Попытка
		ТабличныеЧастиОбъекта = ОбъектМетаданных.ТабличныеЧасти;
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	#КонецОбласти
	
	Для Каждого ТабличнаяЧастьОбъекта Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		Результат.Добавить(ТабличнаяЧастьОбъекта.Имя);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Полное имя указанной табличной части переданного объекта метаданных.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных, метаданные объекта.
//	ИмяТабличнойЧасти - Строка, имя табличной части объекта метаданных (например: "Товары").
//
// Возвращаемое значение:
//	Строка. Полное имя табличной части объекта метаданных (например: "Документ.ПриходнаяНакладная.Товары").
// 			 
Функция ПолноеИмяТабличнойЧастиОбъектаМетаданных(ОбъектМетаданных, ИмяТабличнойЧасти) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если (ОбъектМетаданных = Неопределено) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяТипаОбъекта = ИмяТипаОбъектаМетаданных(ОбъектМетаданных);
	
	Если (Не ЗначениеЗаполнено(ИмяТипаОбъекта)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Результат = ПодставитьПараметрыВСтроку("%1.%2.%3", ИмяТипаОбъекта, ОбъектМетаданных.Имя, ИмяТабличнойЧасти);
	
	Возврат Результат;
	
КонецФункции

// Количество элементов коллекции указанного типа объекта метаданных,
// например, сколько записей в справочнике "Номенклатура".
//
// Параметры:
//	ИмяКоллекцииМетаданных - Строка - имя коллекции метаданных, например: "Справочник", 
//	ИмяОбъектаМетаданных   - Строка - имя объекта метаданных, например: "Номенклатура".
//
// Возвращаемое значение:
//	Тип: Число
//	Количество элементов коллекции указанного типа.
//	
Функция КоличествоЭлементовКоллекцииТипаОбъектаМетаданных(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных) Экспорт
	
	Результат = 0;
	ПустойРезультат = 0;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяКоллекцииМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос = КоличествоЭлементовКоллекцииТипаОбъектаМетаданныхЗапрос(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);
	
	Если Запрос = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	КоличествоЭлементов = Выборка.КоличествоЭлементов;
	
	Результат = КоличествоЭлементов;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеТипаОбъектаКонфигурации(ОбъектКонфигурации) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	ИмяТипа = "";
	
	Попытка
		ОбъектМетаданных = ОбъектКонфигурации.Метаданные();
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	Если ЭтоСправочник(ОбъектМетаданных) Тогда
		ИмяТипа = "Справочник";
	ИначеЕсли ЭтоДокумент(ОбъектМетаданных) Тогда
		ИмяТипа = "Документ";
	ИначеЕсли ЭтоПеречисление(ОбъектМетаданных) Тогда
		ИмяТипа = "Перечисление";
	ИначеЕсли ЭтоБизнесПроцесс(ОбъектМетаданных) Тогда
		ИмяТипа = "БизнесПроцесс";
	ИначеЕсли ЭтоЗадача(ОбъектМетаданных) Тогда
		ИмяТипа = "Задача";
	ИначеЕсли ЭтоПланОбмена(ОбъектМетаданных) Тогда
		ИмяТипа = "ПланОбмена";
	ИначеЕсли ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
		ИмяТипа = "ПланВидовХарактеристик";
	ИначеЕсли ЭтоПланСчетов(ОбъектМетаданных) Тогда
		ИмяТипа = "ПланСчетов";
	ИначеЕсли ЭтоВнешнийИсточникДанных(ОбъектМетаданных) Тогда
		ИмяТипа = "ВнешнийИсточникДанных";
	ИначеЕсли ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		ИмяТипа = "РегистрСведений";
	ИначеЕсли ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
		ИмяТипа = "РегистрНакопления";
	ИначеЕсли ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
		ИмяТипа = "РегистрБухгалтерии";
	ИначеЕсли ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
		ИмяТипа = "РегистрРасчета";
	ИначеЕсли ЭтоРегламентноеЗадание(ОбъектМетаданных) Тогда
		ИмяТипа = "РегламентноеЗадание";
	КонецЕсли;
	
	ИмяОбъектаМетаданных = ОбъектМетаданных.Имя;
	
	Результат = ПодставитьПараметрыВСтроку("%1.%2", ИмяТипа, ИмяОбъектаМетаданных);
	
	Возврат Результат;
	
КонецФункции

Функция МетаданныеПользователяИнформационнойБазы() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("АутентификацияOpenID"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("АутентификацияОС"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("АутентификацияСтандартная"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ЗапрещеноИзменятьПароль"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ЗащитаОтОпасныхДействий"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("Имя"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ОсновнойИнтерфейс"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("Пароль"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ПарольУстановлен"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ПоказыватьВСпискеВыбора"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ПолноеИмя"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("ПользовательОС"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("РазделениеДанных"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("РежимЗапуска"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("Роли"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("СохраняемоеЗначениеПароля"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("УникальныйИдентификатор"));
	Результат.Добавить(Тип_СвойстваПользователяИнформационнойБазы("Язык"));
	
	Возврат Результат;
	
КонецФункции

Функция НомерКартинки(ТипОбъекта) Экспорт
	
	Результат = 0;
	ПустойРезультат = 0;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку описания типов.
//
// Параметры:
//	Тип - ОписаниеТипов - описание типов.
//
// Возвращаемое значение:
//	Тип значения: Строка
//	Представление описания типов (например: "Справочник.Номенклатура;Справочник.ХарактеристикиНоменклатуры").
//
Функция СтрокаОписанияТипов(Тип) Экспорт
	
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(Тип) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	СтрокаОписания = "";
	
	Типы = Тип.Типы();
	
	Если Типы.Количество() = 1 Тогда
		
		УдалитьПоследнийРазделитель = Ложь;
		
		ТипЗначения = Типы[0];
		
		Если ТипЗначения = ТипЗнч("") Тогда
			СтрокаОписания = ПодставитьПараметрыВСтроку("Строка (%1,%2)", Тип.КвалификаторыСтроки.Длина, ?(Тип.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная, "*", ""));
		ИначеЕсли ТипЗначения = ТипЗнч(0) Тогда
			СтрокаОписания = ПодставитьПараметрыВСтроку("Число (%1,%2,%3)", Тип.КвалификаторыЧисла.Разрядность, Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, ?(Тип.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Любой, "+-", "+"));
		ИначеЕсли ТипЗначения = ТипЗнч(Истина) Тогда
			СтрокаОписания = "Булево";
		ИначеЕсли ТипЗначения = ТипЗнч('00010101') Тогда
			СтрокаОписания = ПодставитьПараметрыВСтроку("Дата (%1)", ?(Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, "Д", ?(Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время, "В", "Д+В")));
		Иначе
			
			МетаданныеТипаРеквизита = Метаданные.НайтиПоТипу(ТипЗначения);
			
			Если Не (МетаданныеТипаРеквизита = Неопределено) Тогда
				
				ПолноеИмяТипа = МетаданныеТипаРеквизита.ПолноеИмя();
				ПредставлениеТипа = ПолноеИмяТипа;
				
				СтрокаОписания = ПредставлениеТипа;
				
			Иначе
				
				СтрокаОписания = Строка(ТипЗначения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		УдалитьПоследнийРазделитель = Истина;
		
		Для каждого ТипЗначения Из Типы Цикл
			
			МетаданныеТипаРеквизита = Метаданные.НайтиПоТипу(ТипЗначения);
			
			Если Не (МетаданныеТипаРеквизита = Неопределено) Тогда
				
				ПолноеИмяТипа = МетаданныеТипаРеквизита.ПолноеИмя();
				ПредставлениеТипа = ПолноеИмяТипа;
				
				СтрокаОписания = СтрокаОписания + ПредставлениеТипа + ";";
				
			ИначеЕсли ТипЗначения = ТипЗнч("") Тогда
				СтрокаОписания = СтрокаОписания
				+ ПодставитьПараметрыВСтроку("Строка (%1,%2)", Тип.КвалификаторыСтроки.Длина, ?(Тип.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная, "*", ""))
				+ ";";
			ИначеЕсли ТипЗначения = ТипЗнч(0) Тогда
				СтрокаОписания = СтрокаОписания
				+ ПодставитьПараметрыВСтроку("Число (%1,%2,%3)", Тип.КвалификаторыЧисла.Разрядность, Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, ?(Тип.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Любой, "+-", "+"))
				+ ";";
			ИначеЕсли ТипЗначения = ТипЗнч(Истина) Тогда
				СтрокаОписания = СтрокаОписания + "Булево" + ";";
			ИначеЕсли ТипЗначения = ТипЗнч('00010101') Тогда
				СтрокаОписания = СтрокаОписания
				+ ПодставитьПараметрыВСтроку("Дата (%1)", ?(Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, "Д", ?(Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время, "В", "Д+В")))
				+ ";";
			Иначе
				
				СтрокаОписания = СтрокаОписания + Строка(ТипЗначения) + ";";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если УдалитьПоследнийРазделитель Тогда
		СтрокаОписания = Лев(СтрокаОписания, СтрДлина(СтрокаОписания) - 1);
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

// Менеджер объектов базы по указанному в строке определителю.
//
// Параметры:
//	ОпределительТипаЭлементов - Строка, тип элемент (например: "Справочник.Номенклатура").
//
// Возвращаемое значение:
//	МенеджерОбъектов. Менеджер объектов элементов базы, например: Справочники.Номенклатура.
//
Функция МенеджерОбъектовБазы(ОпределительТипаЭлементов) Экспорт
	
	Результат = Неопределено;
	ПустойРезультат = Неопределено;
	
	#Область Предусловия
	
	Если Не (ЗначениеЗаполнено(ОпределительТипаЭлементов)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЧастиСтроки = РазложитьСтрокуВМассивПодстрок(ОпределительТипаЭлементов, ".");
	
	Если (ЧастиСтроки.Количество() < 2) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	ИмяСвойстваГК = ИмяСвойстваГлобальногоКонтекста(ЧастиСтроки[0]); // "Справочник"
	
	Если Не ЗначениеЗаполнено(ИмяСвойстваГК) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	ТекстВыражения = ПодставитьПараметрыВСтроку("Результат = %1.%2", ИмяСвойстваГК, ЧастиСтроки[1]); // "Номенклатура"
	
	Выполнить ТекстВыражения;
	
	Возврат Результат;
	
КонецФункции

// Получает ссылку на элемент базы по адресу.
//
// Параметры:
//	АдресСсылки - Строка, навигационная ссылка или строка GUID с адресом элемента.
//	ОпределительТипаЭлементов - Строка, определитель тип элемента (например: "Справочник.Номенклатура").
//
// Возвращаемое значение:
//	ЛюбаяСсылка. Ссылка не элемент информационной базы.
//
Функция ПолучитьСсылкуНаЭлементБазыПоАдресу(АдресСсылки, ОпределительТипаЭлементов = "") Экспорт
	
	Результат = Неопределено;
	ПустойРезультат = Неопределено;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(АдресСсылки) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтоНавигационнаяСсылка = ЭтоНавигационнаяСсылка(АдресСсылки);
	
	Если ЭтоНавигационнаяСсылка Тогда
		Результат = ПолучитьСсылкуНаЭлементИзНавигационнойСсылки(АдресСсылки);
	Иначе
		Результат = ПолучитьСсылкуНаЭлементПоИдентификатору(АдресСсылки, ОпределительТипаЭлементов);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Получает ссылку на элемент информационной базы по строке GUID.
//
// Параметры:
//	СтрокаGUID - Строка, строка GUID для формирования уникального идентификтора (например: "1db01014-7c2a-11e7-80ed-00505699065d"). 
//	ОпределительТипаЭлементов - Строка, определитель тип элемента (например: "Справочник.Номенклатура").
//
// Возвращаемое значение:
//	ЛюбаяСсылка. Ссылка не элемент информационной базы.
//
Функция ПолучитьСсылкуНаЭлементПоИдентификатору(СтрокаGUID, ОпределительТипаЭлементов) Экспорт
	
	Результат = Неопределено;
	ПустойРезультат = Неопределено;
	
	#Область Предусловия
	
	Если Не (ЗначениеЗаполнено(СтрокаGUID)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ОпределительТипаЭлементов)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	МенеджерОбъектовИБ = МенеджерОбъектовБазы(ОпределительТипаЭлементов);
	
	Если (МенеджерОбъектовИБ = Неопределено) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Попытка
		УникальныйИд = Новый УникальныйИдентификатор(СтрокаGUID);
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	#КонецОбласти
	
	СсылкаНаЭлемент = МенеджерОбъектовИБ.ПолучитьСсылку(УникальныйИд);
	
	Результат = СсылкаНаЭлемент;
	Возврат Результат;
	
КонецФункции

// Получает ссылку на элемент информационной базы по навигационной ссылке.
//
// Параметры:
//	НавигационнаяСсылка - Строка, навигационная ссылка (например: "e1cib/data/Справочник.Контрагенты?ref=80ed00505699065d11e77c2a1db01014").
//
// Возвращаемое значение:
//	ЛюбаяСсылка. Ссылка на элемент информационной базы.
//
Функция ПолучитьСсылкуНаЭлементИзНавигационнойСсылки(НавигационнаяСсылка) Экспорт
	
	Результат = Неопределено;
	ПустойРезультат = Неопределено;
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(НавигационнаяСсылка)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
	ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");
	
	ПредставлениеТипа = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка
		- ПерваяТочка - 11);
		ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа
		+ ".ПустаяСсылка")
	);
	
	ЗначениеСсылкиСтрокой = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигационнаяСсылка, ВтораяТочка + 5));
	
	СсылкаНаЭлемент = ЗначениеИзСтрокиВнутр(ЗначениеСсылкиСтрокой);
	
	//
	Результат = СсылкаНаЭлемент;
	Возврат Результат;
	
КонецФункции

Функция НомерКартинкиДляТипаОбъекта(ТипОбъекта) Экспорт
	
	Результат = 0;
	ПустойРезультат = Неопределено;
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ТипОбъекта)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = мСоответствиеКартинок.Получить(ТипОбъекта);
	
	Возврат Результат;
	
КонецФункции

// Максимальное количество субконто плана счетов регистра бухгалтерии.
//
// Параметры:
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный").
//
// Возвращаемое значение:
//	Число. Максимальное количество субконто.  
//
Функция МаксКоличествоСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии) Экспорт
	
	Результат = 0;
	ПустойРезультат = 0;
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии)) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Попытка
		МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	Попытка
		Результат = МетаданныеРегистра.ПланСчетов.МаксКоличествоСубконто;
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру описания корреспондирующих полей регистра бухгалтерии.
//
// Параметры:
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный").
//
// Возвращаемое значение:
//	Структура. Описание корреспондирующих полей регистра бухгалтерии (См. Тип_КоррПоляРегистраБухгалтерии()).  
//
Функция ПоляРегистраБухгалтерииДтКт(ИмяРегистраБухгалтерии) Экспорт
	
	Результат = Тип_ПоляРегистраБухгалтерииДтКт();
	ПустойРезультат = Тип_ПоляРегистраБухгалтерииДтКт();
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Попытка
		МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	Если Не МетаданныеРегистра.Корреспонденция Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Измерения.
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		Если Не (Измерение.ПризнакУчета = Неопределено)
			Или Не Измерение.Балансовый Тогда
			ЗапомнитьКоррПолеРегистраБухгалтерии(Результат, "Измерения", Измерение.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Ресурсы.
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если Не (Ресурс.ПризнакУчета = Неопределено) Или Не Ресурс.Балансовый Тогда
			ЗапомнитьКоррПолеРегистраБухгалтерии(Результат, "Ресурсы", Ресурс.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Счета
	Попытка
		ПланСчетовРегистра = МетаданныеРегистра.ПланСчетов;
	Исключение
		ПланСчетовРегистра = Неопределено;
	КонецПопытки;
	
	Если Не (ПланСчетовРегистра = Неопределено) Тогда
		Если (МетаданныеРегистра.Корреспонденция) Тогда
			Результат.Счета.Добавить(Новый Структура("ИмяРеквизитаСчета, ТипСчета", "СчетДт", Новый ОписаниеТипов("ПланСчетовСсылка."
			+ ПланСчетовРегистра.Имя)));
			Результат.Счета.Добавить(Новый Структура("ИмяРеквизитаСчета, ТипСчета", "СчетКт", Новый ОписаниеТипов("ПланСчетовСсылка."
			+ ПланСчетовРегистра.Имя)));
		Иначе
			Результат.Счета.Добавить(Новый Структура("ИмяРеквизитаСчета, ТипСчета", "Счет", Новый ОписаниеТипов("ПланСчетовСсылка."
			+ ПланСчетовРегистра.Имя)));
		КонецЕсли;
	КонецЕсли;
	
	// Количество видов субконто.
	Результат.МаксКоличествоСубконто = МаксКоличествоСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии);
	
	Возврат Результат;
	
КонецФункции

Функция ИменаСвойствОбъектаБазы(ОпределительОбъекта, ИмяОбъектаБазы = "") Экспорт
	
	Результат = Новый Массив;
	
	Если ОпределительОбъекта = "СистемнаяИнформация" Тогда
		
		Результат.Добавить("ВерсияОС");
		Результат.Добавить("ВерсияПриложения");
		Результат.Добавить("ИдентификаторКлиента");
		Результат.Добавить("ИнформацияПрограммыПросмотра");
		Результат.Добавить("ОперативнаяПамять");
		Результат.Добавить("Процессор");
		Результат.Добавить("ТипПлатформы");
		
	ИначеЕсли ОпределительОбъекта = "Конфигурация" Тогда
		
		Результат.Добавить("АвторскиеПрава");
		Результат.Добавить("АдресИнформацииОКонфигурации");
		Результат.Добавить("АдресИнформацииОПоставщике");
		Результат.Добавить("АдресКаталогаОбновлений");
		Результат.Добавить("ВариантВстроенногоЯзыка");
		Результат.Добавить("Версия");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("Имя");
		Результат.Добавить("ИнтерфейсКлиентскогоПриложения");
		Результат.Добавить("ИспользоватьОбычныеФормыВУправляемомПриложении");
		Результат.Добавить("ИспользоватьУправляемыеФормыВОбычномПриложении");
		Результат.Добавить("КартинкаОсновногоРаздела");
		Результат.Добавить("Комментарий");
		Результат.Добавить("КраткаяИнформация");
		Результат.Добавить("Логотип");
		Результат.Добавить("ОсновнойРежимЗапуска");
		Результат.Добавить("ОсновнойЯзык");
		Результат.Добавить("ПодробнаяИнформация");
		Результат.Добавить("Поставщик");
		Результат.Добавить("ПрефиксИмен");
		Результат.Добавить("РежимСовместимости");
		Результат.Добавить("РежимСовместимостиИнтерфейса");
		Результат.Добавить("РежимСовместимостиРасширенияКонфигурации");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		Результат.Добавить("Синоним");
		
	ИначеЕсли ОпределительОбъекта = "Подсистема" Тогда
		
		Результат.Добавить("ВключатьВКомандныйИнтерфейс");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("Имя");
		Результат.Добавить("Картинка");
		Результат.Добавить("КомандныйИнтерфейс");
		Результат.Добавить("Комментарий");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("Синоним");
		
	ИначеЕсли ОпределительОбъекта = "ОбщийМодуль" Тогда
		
		Результат.Добавить("ВнешнееСоединение");
		Результат.Добавить("ВызовСервера");
		Результат.Добавить("Глобальный");
		Результат.Добавить("Имя");
		Результат.Добавить("КлиентОбычноеПриложение");
		Результат.Добавить("КлиентУправляемоеПриложение");
		Результат.Добавить("Комментарий");
		Результат.Добавить("Модуль");
		Результат.Добавить("ПовторноеИспользованиеВозвращаемыхЗначений");
		Результат.Добавить("Привилегированный");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("Сервер");
		Результат.Добавить("Синоним");
		
	ИначеЕсли ОпределительОбъекта = "ПараметрСеанса" Тогда
		
		Результат.Добавить("Имя");
		Результат.Добавить("Комментарий");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("Синоним");
		
	ИначеЕсли ОпределительОбъекта = "Роль" Тогда
		
		Результат.Добавить("Имя");
		Результат.Добавить("Комментарий");
		Результат.Добавить("Права");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("Синоним");
		
	ИначеЕсли ОпределительОбъекта = "ОбщийРеквизит" Тогда
		
		Результат.Добавить("АвтоИспользование");
		Результат.Добавить("БыстрыйВыбор");
		Результат.Добавить("ВыборГруппИЭлементов");
		Результат.Добавить("ВыделятьОтрицательные");
		Результат.Добавить("ЗаполнятьИзДанныхЗаполнения");
		Результат.Добавить("ЗначениеЗаполнения");
		Результат.Добавить("ЗначениеРазделенияДанных");
		Результат.Добавить("Имя");
		Результат.Добавить("Индексирование");
		Результат.Добавить("ИспользованиеРазделенияДанных");
		Результат.Добавить("ИспользованиеРазделяемыхДанных");
		Результат.Добавить("ИсторияВыбораПриВводе");
		Результат.Добавить("Комментарий");
		Результат.Добавить("МаксимальноеЗначение");
		Результат.Добавить("Маска");
		Результат.Добавить("МинимальноеЗначение");
		Результат.Добавить("МногострочныйРежим");
		//Результат.Добавить("ПараметрыВыбора");
		Результат.Добавить("Подсказка");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("ПроверкаЗаполнения");
		Результат.Добавить("РазделениеАутентификации");
		Результат.Добавить("РазделениеДанных");
		Результат.Добавить("РазделениеПользователей");
		Результат.Добавить("РазделениеРасширенийКонфигурации");
		Результат.Добавить("РасширенноеРедактирование");
		Результат.Добавить("РежимПароля");
		//Результат.Добавить("СвязиПараметровВыбора");
		//Результат.Добавить("СвязьПоТипу");
		Результат.Добавить("Синоним");
		Результат.Добавить("СозданиеПриВводе");
		//Результат.Добавить("Состав");
		Результат.Добавить("Тип");
		Результат.Добавить("УсловноеРазделение");
		//Результат.Добавить("ФормаВыбора");
		Результат.Добавить("Формат");
		Результат.Добавить("ФорматРедактирования");
		
	ИначеЕсли ОпределительОбъекта = "ПланОбмена" Тогда
		
		Результат.Добавить("БыстрыйВыбор");
		Результат.Добавить("ВводПоСтроке");
		//Результат.Добавить("ВводитсяНаОсновании");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("ДлинаКода");
		Результат.Добавить("ДлинаНаименования");
		//Результат.Добавить("ДополнительнаяФормаДляВыбора");
		//Результат.Добавить("ДополнительнаяФормаОбъекта");
		//Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("ДопустимаяДлинаКода");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульОбъекта");
		//Результат.Добавить("ОсновнаяФормаДляВыбора");
		//Результат.Добавить("ОсновнаяФормаОбъекта");
		//Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ОсновноеПредставление");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("ПолнотекстовыйПоискПриВводеПоСтроке");
		Результат.Добавить("ПоляБлокировкиДанных");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеОбъекта");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РаспределеннаяИнформационнаяБаза");
		Результат.Добавить("РасширенноеПредставлениеОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимПолученияДанныхВыбораПриВводеПоСтроке");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		Результат.Добавить("Синоним");
		Результат.Добавить("СозданиеПриВводе");
		//Результат.Добавить("Состав");
		Результат.Добавить("СпособВыбора");
		Результат.Добавить("СпособПоискаСтрокиПриВводеПоСтроке");
		Результат.Добавить("СпособРедактирования");
		Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("ТабличныеЧасти");
		//Результат.Добавить("Формы");
		//Результат.Добавить("Характеристики");
		
	ИначеЕсли ОпределительОбъекта = "КритерийОтбора" Тогда
		
		Результат.Добавить("ДополнительнаяФорма");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("МодульМенеджера");
		Результат.Добавить("ОсновнаяФорма");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("Синоним");
		Результат.Добавить("Состав");
		Результат.Добавить("Тип");
		//Результат.Добавить("Формы");
		
	ИначеЕсли ОпределительОбъекта = "ПодпискаНаСобытие" Тогда
		
		Результат.Добавить("Имя");
		Результат.Добавить("Источник");
		Результат.Добавить("Комментарий");
		Результат.Добавить("Обработчик");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("Синоним");
		Результат.Добавить("Событие");
		
	ИначеЕсли ОпределительОбъекта = "РегламентноеЗадание" Тогда
		
		Результат.Добавить("Имя");
		Результат.Добавить("ИмяМетода");
		Результат.Добавить("ИнтервалПовтораПриАварийномЗавершении");
		Результат.Добавить("Использование");
		Результат.Добавить("Ключ");
		Результат.Добавить("КоличествоПовторовПриАварийномЗавершении");
		Результат.Добавить("Комментарий");
		Результат.Добавить("Наименование");
		Результат.Добавить("Предопределенное");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("Расписание");
		Результат.Добавить("Синоним");
		
	ИначеЕсли ОпределительОбъекта = "ФункциональнаяОпция" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "ПараметрФункциональнойОпции" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "ОпределяемыйТип" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "ХранилищеНастроек" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "ОбщаяФорма" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "ОбщаяКоманда" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "ГруппаКоманд" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "ОбщийМакет" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "ОбщаяКартинка" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "XDTOПакет" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "WebСервис" Тогда
		
		Результат.Добавить("ВремяЖизниСеанса");
		Результат.Добавить("Имя");
		Результат.Добавить("ИмяФайлаПубликации");
		Результат.Добавить("Комментарий");
		Результат.Добавить("Модуль");
		Результат.Добавить("Операции");
		//Результат.Добавить("ПакетыXDTO");
		Результат.Добавить("ПовторноеИспользованиеСеансов");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("ПространствоИмен");
		Результат.Добавить("Синоним");
		
	ИначеЕсли ОпределительОбъекта = "HTTPСервис" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "WSСсылка" Тогда
		
		Результат.Добавить("URLИсточника");
		Результат.Добавить("WSОпределение");
		Результат.Добавить("Имя");
		Результат.Добавить("Комментарий");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("Синоним");
		
	ИначеЕсли ОпределительОбъекта = "ЭлементСтиля" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "Язык" Тогда
		
		Результат.Добавить("Имя");
		
	ИначеЕсли ОпределительОбъекта = "Константа" Тогда
		
		Результат.Добавить("БыстрыйВыбор");
		Результат.Добавить("ВыборГруппИЭлементов");
		Результат.Добавить("ВыделятьОтрицательные");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		Результат.Добавить("Комментарий");
		Результат.Добавить("МаксимальноеЗначение");
		Результат.Добавить("Маска");
		Результат.Добавить("МинимальноеЗначение");
		Результат.Добавить("МногострочныйРежим");
		//Результат.Добавить("МодульМенеджераЗначения");
		//Результат.Добавить("ОсновнаяФорма");
		//Результат.Добавить("ПараметрыВыбора");
		Результат.Добавить("Подсказка");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("ПроверкаЗаполнения");
		Результат.Добавить("РасширенноеПредставление");
		Результат.Добавить("РасширенноеРедактирование");
		Результат.Добавить("РежимПароля");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("СвязиПараметровВыбора");
		//Результат.Добавить("СвязьПоТипу");
		Результат.Добавить("Синоним");
		Результат.Добавить("Тип");
		//Результат.Добавить("ФормаВыбора");
		Результат.Добавить("Формат");
		Результат.Добавить("ФорматРедактирования");
		
	ИначеЕсли ОпределительОбъекта = "Документ" Тогда
		
		Результат.Добавить("Автонумерация");
		Результат.Добавить("ВводПоСтроке");
		Результат.Добавить("ВводитсяНаОсновании");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("Движения");
		Результат.Добавить("ДлинаНомера");
		//Результат.Добавить("ДополнительнаяФормаДляВыбора");
		//Результат.Добавить("ДополнительнаяФормаОбъекта");
		//Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("ДопустимаяДлинаНомера");
		Результат.Добавить("ЗаписьДвиженийПриПроведении");
		Результат.Добавить("ЗаполнениеПоследовательностей");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		Результат.Добавить("КонтрольУникальности");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульОбъекта");
		Результат.Добавить("Нумератор");
		Результат.Добавить("ОперативноеПроведение");
		Результат.Добавить("ОсновнаяФормаДляВыбора");
		Результат.Добавить("ОсновнаяФормаОбъекта");
		Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ПериодичностьНомера");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("ПолнотекстовыйПоискПриВводеПоСтроке");
		//Результат.Добавить("ПоляБлокировкиДанных");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеОбъекта");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПривилегированныйРежимПриОтменеПроведения");
		Результат.Добавить("ПривилегированныйРежимПриПроведении");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("Проведение");
		Результат.Добавить("РасширенноеПредставлениеОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимПолученияДанныхВыбораПриВводеПоСтроке");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		Результат.Добавить("Реквизиты");
		Результат.Добавить("Синоним");
		Результат.Добавить("СозданиеПриВводе");
		Результат.Добавить("СпособПоискаСтрокиПриВводеПоСтроке");
		//Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("ТабличныеЧасти");
		Результат.Добавить("ТипНомера");
		Результат.Добавить("УдалениеДвижений");
		//Результат.Добавить("Формы");
		Результат.Добавить("Характеристики");
		
	ИначеЕсли ОпределительОбъекта = "Справочник" Тогда
		
		Результат.Добавить("Автонумерация");
		Результат.Добавить("БыстрыйВыбор");
		Результат.Добавить("ВводПоСтроке");
		//Результат.Добавить("ВводитсяНаОсновании");
		Результат.Добавить("ВидИерархии");
		Результат.Добавить("ВключатьСправкуВСодержание");
		//Результат.Добавить("Владельцы");
		Результат.Добавить("ГруппыСверху");
		Результат.Добавить("ДлинаКода");
		Результат.Добавить("ДлинаНаименования");
		Результат.Добавить("ДополнительнаяФормаГруппы");
		Результат.Добавить("ДополнительнаяФормаДляВыбора");
		Результат.Добавить("ДополнительнаяФормаДляВыбораГруппы");
		Результат.Добавить("ДополнительнаяФормаОбъекта");
		Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("ДопустимаяДлинаКода");
		Результат.Добавить("Иерархический");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользованиеПодчинения");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		Результат.Добавить("КоличествоУровней");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		Результат.Добавить("КонтрольУникальности");
		//Результат.Добавить("Макеты");
		Результат.Добавить("МодульМенеджера");
		Результат.Добавить("МодульОбъекта");
		Результат.Добавить("ОбновлениеПредопределенныхДанных");
		Результат.Добавить("ОграничиватьКоличествоУровней");
		Результат.Добавить("ОсновнаяФормаГруппы");
		Результат.Добавить("ОсновнаяФормаДляВыбора");
		Результат.Добавить("ОсновнаяФормаДляВыбораГруппы");
		Результат.Добавить("ОсновнаяФормаОбъекта");
		Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ОсновноеПредставление");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("ПолнотекстовыйПоискПриВводеПоСтроке");
		Результат.Добавить("ПоляБлокировкиДанных");
		Результат.Добавить("Пояснение");
		Результат.Добавить("Предопределенные");
		Результат.Добавить("ПредставлениеОбъекта");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимПолученияДанныхВыбораПриВводеПоСтроке");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		Результат.Добавить("СерииКодов");
		Результат.Добавить("Синоним");
		Результат.Добавить("СозданиеПриВводе");
		Результат.Добавить("СпособВыбора");
		Результат.Добавить("СпособПоискаСтрокиПриВводеПоСтроке");
		Результат.Добавить("СпособРедактирования");
		//Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("ТабличныеЧасти");
		Результат.Добавить("ТипКода");
		//Результат.Добавить("Формы");
		Результат.Добавить("Характеристики");
		
	ИначеЕсли ОпределительОбъекта = "ЖурналДокументов" Тогда
		
		Результат.Добавить("ВключатьСправкуВСодержание");
		//Результат.Добавить("Графы");
		Результат.Добавить("ДополнительнаяФорма");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		Результат.Добавить("ОсновнаяФорма");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		//Результат.Добавить("РегистрируемыеДокументы");
		Результат.Добавить("Синоним");
		//Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("Формы");
		
	ИначеЕсли ОпределительОбъекта = "Перечисление" Тогда
		
		Результат.Добавить("БыстрыйВыбор");
		//Результат.Добавить("ДополнительнаяФормаДляВыбора");
		//Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("ЗначенияПеречисления");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("ОсновнаяФормаДляВыбора");
		//Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("Синоним");
		Результат.Добавить("СпособВыбора");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("Формы");
		//Результат.Добавить("Характеристики");
		
	ИначеЕсли ОпределительОбъекта = "Отчет" Тогда
		
		Результат.Добавить("ВключатьСправкуВСодержание");
		//Результат.Добавить("ДополнительнаяФорма");
		//Результат.Добавить("ДополнительнаяФормаНастроек");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульОбъекта");
		Результат.Добавить("ОсновнаяСхемаКомпоновкиДанных");
		//Результат.Добавить("ОсновнаяФорма");
		//Результат.Добавить("ОсновнаяФормаВарианта");
		//Результат.Добавить("ОсновнаяФормаНастроек");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставление");
		//Результат.Добавить("Реквизиты");
		Результат.Добавить("Синоним");
		//Результат.Добавить("Справка");
		//Результат.Добавить("ТабличныеЧасти");
		//Результат.Добавить("Формы");
		//Результат.Добавить("ХранилищеВариантов");
		//Результат.Добавить("ХранилищеНастроек");
		
	ИначеЕсли ОпределительОбъекта = "Обработка" Тогда
		
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("ДополнительнаяФорма");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульОбъекта");
		//Результат.Добавить("ОсновнаяФорма");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставление");
		//Результат.Добавить("Реквизиты");
		Результат.Добавить("Синоним");
		Результат.Добавить("Справка");
		//Результат.Добавить("ТабличныеЧасти");
		//Результат.Добавить("Формы");
		
	ИначеЕсли ОпределительОбъекта = "ПланВидовХарактеристик" Тогда
		
		Результат.Добавить("Автонумерация");
		Результат.Добавить("БыстрыйВыбор");
		Результат.Добавить("ВводПоСтроке");
		Результат.Добавить("ВводитсяНаОсновании");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("ГруппыСверху");
		Результат.Добавить("ДлинаКода");
		Результат.Добавить("ДлинаНаименования");
		//Результат.Добавить("ДополнительнаяФормаГруппы");
		//Результат.Добавить("ДополнительнаяФормаДляВыбора");
		//Результат.Добавить("ДополнительнаяФормаДляВыбораГруппы");
		//Результат.Добавить("ДополнительнаяФормаОбъекта");
		//Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("ДополнительныеЗначенияХарактеристик");
		Результат.Добавить("ДопустимаяДлинаКода");
		Результат.Добавить("Иерархический");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		Результат.Добавить("КонтрольУникальности");
		//Результат.Добавить("Макеты");
		Результат.Добавить("МодульМенеджера");
		Результат.Добавить("МодульОбъекта");
		Результат.Добавить("ОбновлениеПредопределенныхДанных");
		Результат.Добавить("ОсновнаяФормаГруппы");
		Результат.Добавить("ОсновнаяФормаДляВыбора");
		Результат.Добавить("ОсновнаяФормаДляВыбораГруппы");
		Результат.Добавить("ОсновнаяФормаОбъекта");
		Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ОсновноеПредставление");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("ПолнотекстовыйПоискПриВводеПоСтроке");
		Результат.Добавить("ПоляБлокировкиДанных");
		Результат.Добавить("Пояснение");
		Результат.Добавить("Предопределенные");
		Результат.Добавить("ПредставлениеОбъекта");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимПолученияДанныхВыбораПриВводеПоСтроке");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		Результат.Добавить("СерииКодов");
		Результат.Добавить("Синоним");
		Результат.Добавить("СозданиеПриВводе");
		Результат.Добавить("СпособВыбора");
		Результат.Добавить("СпособПоискаСтрокиПриВводеПоСтроке");
		Результат.Добавить("СпособРедактирования");
		Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("ТабличныеЧасти");
		Результат.Добавить("Тип");
		//Результат.Добавить("Формы");
		Результат.Добавить("Характеристики");
		
	ИначеЕсли ОпределительОбъекта = "ПланСчетов" Тогда
		
		Результат.Добавить("АвтоПорядокПоКоду");
		Результат.Добавить("БыстрыйВыбор");
		Результат.Добавить("ВводПоСтроке");
		Результат.Добавить("ВводитсяНаОсновании");
		Результат.Добавить("ВидыСубконто");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("ДлинаКода");
		Результат.Добавить("ДлинаНаименования");
		Результат.Добавить("ДлинаПорядка");
		//Результат.Добавить("ДополнительнаяФормаДляВыбора");
		//Результат.Добавить("ДополнительнаяФормаОбъекта");
		//Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		Результат.Добавить("КонтрольУникальности");
		//Результат.Добавить("Макеты");
		Результат.Добавить("МаксКоличествоСубконто");
		Результат.Добавить("МаскаКода");
		Результат.Добавить("МодульМенеджера");
		Результат.Добавить("МодульОбъекта");
		Результат.Добавить("ОбновлениеПредопределенныхДанных");
		//Результат.Добавить("ОсновнаяФормаДляВыбора");
		//Результат.Добавить("ОсновнаяФормаОбъекта");
		//Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ОсновноеПредставление");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("ПолнотекстовыйПоискПриВводеПоСтроке");
		Результат.Добавить("ПоляБлокировкиДанных");
		Результат.Добавить("Пояснение");
		Результат.Добавить("Предопределенные");
		Результат.Добавить("ПредставлениеОбъекта");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПризнакиУчета");
		Результат.Добавить("ПризнакиУчетаСубконто");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимПолученияДанныхВыбораПриВводеПоСтроке");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		Результат.Добавить("СерииКодов");
		Результат.Добавить("Синоним");
		Результат.Добавить("СозданиеПриВводе");
		Результат.Добавить("СпособВыбора");
		Результат.Добавить("СпособПоискаСтрокиПриВводеПоСтроке");
		Результат.Добавить("СпособРедактирования");
		Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("СтандартныеТабличныеЧасти");
		Результат.Добавить("ТабличныеЧасти");
		//Результат.Добавить("Формы");
		Результат.Добавить("Характеристики");
		
	ИначеЕсли ОпределительОбъекта = "ПланВидовРасчета" Тогда
		
		Результат.Добавить("БазовыеВидыРасчета");
		Результат.Добавить("БыстрыйВыбор");
		Результат.Добавить("ВводПоСтроке");
		Результат.Добавить("ВводитсяНаОсновании");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("ДлинаКода");
		Результат.Добавить("ДлинаНаименования");
		Результат.Добавить("ДополнительнаяФормаДляВыбора");
		Результат.Добавить("ДополнительнаяФормаОбъекта");
		Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("ДопустимаяДлинаКода");
		Результат.Добавить("ЗависимостьОтВидовРасчета");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользованиеПериодаДействия");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульОбъекта");
		Результат.Добавить("ОбновлениеПредопределенныхДанных");
		//Результат.Добавить("ОсновнаяФормаДляВыбора");
		//Результат.Добавить("ОсновнаяФормаОбъекта");
		//Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ОсновноеПредставление");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("ПолнотекстовыйПоискПриВводеПоСтроке");
		Результат.Добавить("ПоляБлокировкиДанных");
		Результат.Добавить("Пояснение");
		Результат.Добавить("Предопределенные");
		Результат.Добавить("ПредставлениеОбъекта");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимПолученияДанныхВыбораПриВводеПоСтроке");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		Результат.Добавить("Синоним");
		Результат.Добавить("СозданиеПриВводе");
		Результат.Добавить("СпособВыбора");
		Результат.Добавить("СпособПоискаСтрокиПриВводеПоСтроке");
		Результат.Добавить("СпособРедактирования");
		Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("СтандартныеТабличныеЧасти");
		//Результат.Добавить("ТабличныеЧасти");
		Результат.Добавить("ТипКода");
		//Результат.Добавить("Формы");
		//Результат.Добавить("Характеристики");
		
	ИначеЕсли ОпределительОбъекта = "РегистрСведений" Тогда
		
		Результат.Добавить("ВключатьСправкуВСодержание");
		//Результат.Добавить("ДополнительнаяФормаЗаписи");
		//Результат.Добавить("ДополнительнаяФормаСписка");
		//Результат.Добавить("Измерения");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Макеты");
		Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульНабораЗаписей");
		//Результат.Добавить("ОсновнаяФормаЗаписи");
		//Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ОсновнойОтборПоПериоду");
		Результат.Добавить("ПериодичностьРегистраСведений");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеЗаписи");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РазрешитьИтогиСрезПервых");
		Результат.Добавить("РазрешитьИтогиСрезПоследних");
		Результат.Добавить("РасширенноеПредставлениеЗаписи");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимЗаписи");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		//Результат.Добавить("Ресурсы");
		Результат.Добавить("Синоним");
		Результат.Добавить("СпособРедактирования");
		//Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("Формы");
		
	ИначеЕсли ОпределительОбъекта = "РегистрНакопления" Тогда
		
		Результат.Добавить("Агрегаты");
		Результат.Добавить("ВидРегистра");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("ДополнительнаяФормаСписка");
		//Результат.Добавить("Измерения");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульНабораЗаписей");
		//Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РазрешитьРазделениеИтогов");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		//Результат.Добавить("Ресурсы");
		Результат.Добавить("Синоним");
		//Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("Формы");
		
	ИначеЕсли ОпределительОбъекта = "РегистрБухгалтерии" Тогда
		
		//Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("ДлинаУточненияПериода");
		//Результат.Добавить("ДополнительнаяФормаСписка");
		//Результат.Добавить("Измерения");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		Результат.Добавить("Корреспонденция");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульНабораЗаписей");
		//Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ПланСчетов");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РазрешитьРазделениеИтогов");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		//Результат.Добавить("Ресурсы");
		Результат.Добавить("Синоним");
		//Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("Формы");
		
	ИначеЕсли ОпределительОбъекта = "РегистрРасчета" Тогда
		
		Результат.Добавить("БазовыйПериод");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("График");
		Результат.Добавить("ДатаГрафика");
		Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("ЗначениеГрафика");
		//Результат.Добавить("Измерения");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульНабораЗаписей");
		Результат.Добавить("ОсновнаяФормаСписка");
		//Результат.Добавить("Перерасчеты");
		Результат.Добавить("ПериодДействия");
		Результат.Добавить("Периодичность");
		Результат.Добавить("ПланВидовРасчета");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		//Результат.Добавить("Ресурсы");
		Результат.Добавить("Синоним");
		Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("Формы");
		
	ИначеЕсли ОпределительОбъекта = "БизнесПроцесс" Тогда
		
		Результат.Добавить("Автонумерация");
		Результат.Добавить("ВводПоСтроке");
		Результат.Добавить("ВводитсяНаОсновании");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("ДлинаНомера");
		//Результат.Добавить("ДополнительнаяФормаДляВыбора");
		//Результат.Добавить("ДополнительнаяФормаОбъекта");
		//Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("ДопустимаяДлинаНомера");
		Результат.Добавить("Задача");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		Результат.Добавить("КартаМаршрута");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		Результат.Добавить("КонтрольУникальности");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульОбъекта");
		//Результат.Добавить("ОсновнаяФормаДляВыбора");
		//Результат.Добавить("ОсновнаяФормаОбъекта");
		//Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ПериодичностьНомера");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("ПолнотекстовыйПоискПриВводеПоСтроке");
		Результат.Добавить("ПоляБлокировкиДанных");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеОбъекта");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПривилегированныйРежимПриСозданииЗадач");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимПолученияДанныхВыбораПриВводеПоСтроке");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		Результат.Добавить("Синоним");
		Результат.Добавить("СозданиеПриВводе");
		Результат.Добавить("СпособПоискаСтрокиПриВводеПоСтроке");
		Результат.Добавить("СпособРедактирования");
		Результат.Добавить("Справка");
		//Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("ТабличныеЧасти");
		Результат.Добавить("ТипНомера");
		//Результат.Добавить("Формы");
		//Результат.Добавить("Характеристики");
		
	ИначеЕсли ОпределительОбъекта = "Задача" Тогда
		
		Результат.Добавить("АвтоПрефиксНомераЗадачи");
		Результат.Добавить("Автонумерация");
		Результат.Добавить("Адресация");
		Результат.Добавить("ВводПоСтроке");
		Результат.Добавить("ВводитсяНаОсновании");
		Результат.Добавить("ВключатьСправкуВСодержание");
		Результат.Добавить("ДлинаНаименования");
		Результат.Добавить("ДлинаНомера");
		Результат.Добавить("ДополнительнаяФормаДляВыбора");
		Результат.Добавить("ДополнительнаяФормаОбъекта");
		Результат.Добавить("ДополнительнаяФормаСписка");
		Результат.Добавить("ДопустимаяДлинаНомера");
		Результат.Добавить("Имя");
		Результат.Добавить("ИспользоватьСтандартныеКоманды");
		Результат.Добавить("ИсторияВыбораПриВводе");
		//Результат.Добавить("Команды");
		Результат.Добавить("Комментарий");
		Результат.Добавить("КонтрольУникальности");
		//Результат.Добавить("Макеты");
		//Результат.Добавить("МодульМенеджера");
		//Результат.Добавить("МодульОбъекта");
		Результат.Добавить("ОсновнаяФормаДляВыбора");
		Результат.Добавить("ОсновнаяФормаОбъекта");
		Результат.Добавить("ОсновнаяФормаСписка");
		Результат.Добавить("ОсновноеПредставление");
		Результат.Добавить("ОсновнойРеквизитАдресации");
		Результат.Добавить("ПолнотекстовыйПоиск");
		Результат.Добавить("ПолнотекстовыйПоискПриВводеПоСтроке");
		Результат.Добавить("ПоляБлокировкиДанных");
		Результат.Добавить("Пояснение");
		Результат.Добавить("ПредставлениеОбъекта");
		Результат.Добавить("ПредставлениеСписка");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РасширенноеПредставлениеОбъекта");
		Результат.Добавить("РасширенноеПредставлениеСписка");
		Результат.Добавить("РежимПолученияДанныхВыбораПриВводеПоСтроке");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		//Результат.Добавить("Реквизиты");
		//Результат.Добавить("РеквизитыАдресации");
		Результат.Добавить("Синоним");
		Результат.Добавить("СозданиеПриВводе");
		Результат.Добавить("СпособПоискаСтрокиПриВводеПоСтроке");
		Результат.Добавить("СпособРедактирования");
		Результат.Добавить("Справка");
		Результат.Добавить("СтандартныеРеквизиты");
		//Результат.Добавить("ТабличныеЧасти");
		Результат.Добавить("ТекущийИсполнитель");
		Результат.Добавить("ТипНомера");
		//Результат.Добавить("Формы");
		//Результат.Добавить("Характеристики");
		
	ИначеЕсли ОпределительОбъекта = "ВнешнийИсточникДанных" Тогда
		
		Результат.Добавить("Имя");
		Результат.Добавить("Комментарий");
		//Результат.Добавить("Кубы");
		Результат.Добавить("ПринадлежностьОбъекта");
		Результат.Добавить("РежимУправленияБлокировкойДанных");
		Результат.Добавить("Синоним");
		//Результат.Добавить("Таблицы");
		//Результат.Добавить("Функции");
		
	КонецЕсли;
	
	СЗ = Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(Результат);
	СЗ.СортироватьПоЗначению();
	
	Результат = СЗ.ВыгрузитьЗначения();
	
	Возврат Результат;
	
КонецФункции

Функция ИмяДополнительнойКомандыСпискаЭлементов(ИмяСпискаЭлементов, ТипДопКоманды) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяСпискаЭлементов) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипДопКоманды) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	РЧИ = Система_РазделительЧастейИмен;
	
	Результат = ПодставитьПараметрыВСтроку("Команда" + РЧИ + "%1" + РЧИ + "%2", ТипДопКоманды, ИмяСпискаЭлементов);
	
	Возврат Результат;
	
КонецФункции

// Параметры табличной части, таблицы движений по связанной с ним команде.
//
// Параметры:
//	ИмяЭлементаКоманды - Строка, имя команды (например: "Команда_Закрыть_Список_Справочники_Справочник_ДоговорыКонтрагентов_2").
//
// Возвращаемое значение:
//	Структура. Параметры таблицы объекта (табличной части, связанного набора движений).
//
Функция ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды) Экспорт
	
	Результат       = Тип_ПараметрыТаблицыПоИмениКоманды();
	ПустойРезультат = Неопределено;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаКоманды) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	РЧИ = Система_РазделительЧастейИмен;
	
	ЧастиСтроки = РазложитьСтрокуВМассивПодстрок(
		ИмяЭлементаКоманды, 
		РЧИ
	);
	
	ТипТаблицы = ЧастиСтроки[2];
	ИмяТаблицы = ЧастиСтроки[3];
	
	Результат.ТипТаблицы = ТипТаблицы;
	Результат.ИмяТаблицы = ИмяТаблицы;
	
	Возврат Результат;
	
КонецФункции

// Имя списка элементов, табличной части, таблицы движений по связанной с ним команде.
//
// Параметры:
//	ИмяЭлементаКоманды - Строка, имя команды (например: "Команда_Закрыть_Список_Справочники_Справочник_ДоговорыКонтрагентов_2").
//
// Возвращаемое значение:
//	Строка. Имя элемента-списка (например: "Список_Справочники_Справочник_ДоговорыКонтрагентов_2").
//
Функция ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаКоманды) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	РЧИ = Система_РазделительЧастейИмен;
	
	ЧастиСтроки = РазложитьСтрокуВМассивПодстрок(
		ИмяЭлементаКоманды, 
		РЧИ
	);
	
	ТипСписка = ЧастиСтроки[2];
	
	Если ТипСписка = "ТабличнаяЧасть" Тогда
		
		ИмяСписка = ПодставитьПараметрыВСтроку(
			"%1"
			+ РЧИ + "%2"
			, ЧастиСтроки[2], ЧастиСтроки[3]
		);
		
	ИначеЕсли ТипСписка = "РегистрНакопления" Или ТипСписка = "РегистрСведений" Или ТипСписка = "РегистрРасчета" Или ТипСписка = "РегистрБухгалтерии" Тогда
		
		ИмяСписка = ПодставитьПараметрыВСтроку(
			"%1"
			+ РЧИ + "%2"
			, ЧастиСтроки[2], ЧастиСтроки[3]
		);
		
	Иначе
		
		ИмяСписка = ПодставитьПараметрыВСтроку(
			"Список"
			+ РЧИ + "%1"
			+ РЧИ + "%2"
			+ РЧИ + "%3"
			+ РЧИ
			+ "%4", ЧастиСтроки[3], ЧастиСтроки[4], ЧастиСтроки[5], ЧастиСтроки[6]
		);
		
	КонецЕсли;
	
	Результат = ИмяСписка;
	
	Возврат Результат;
	
КонецФункции

Функция НавигационнаяСсылкаНаЭлемент(ЭлементБазы) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ЭлементБазы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Попытка
		ЭлементБазыМД = ЭлементБазы.Метаданные()
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	#КонецОбласти
	
	НвСсылка = "";
	
	Попытка
		НвСсылка = ПолучитьНавигационнуюСсылку(ЭлементБазы);
	Исключение
		//
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(НвСсылка) Тогда
		
		Если ЭтоПланОбмена(ЭлементБазыМД) Тогда
			НвСсылка = НавигационнаяСсылкаНаУзелПланаОбмена(ЭлементБазы);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НвСсылка;
	
	Возврат Результат;
	
КонецФункции

// Навигационная ссылка на узел плана обмена.
//
// Параметры:
//	Узел - ПланОбменаСсылка - узел плана обмена.
//
// Возвращаемое значение:
//	Строка. Навигационная ссылка на узел плана обмена (например: "e1cib/data/ПланОбмена.Полный?ref=82776014b37d65b811e8d25d0e5912d4").
//
Функция НавигационнаяСсылкаНаУзелПланаОбмена(Узел) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	УзелМД = Узел.Метаданные();
	ИмяПланаОбмена = УзелМД.Имя;
	
	//
	
	УзелИД = Строка(Узел.УникальныйИдентификатор());
	НвСсылкаИД = ИдентификаторДляНавигационнойСсылки(УзелИД);
	
	//
	
	Результат = ПодставитьПараметрыВСтроку("e1cib/data/ПланОбмена.%1?ref=%2", ИмяПланаОбмена, НвСсылкаИД);
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторДляНавигационнойСсылки(Знач ИД)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИД) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИД = СокрЛП(ИД);
	
	ЧастиИД = РазложитьСтрокуВМассивПодстрок(ИД, "-");
	
	Результат = ЧастиИД[3] + ЧастиИД[4] + ЧастиИД[2] + ЧастиИД[1] + ЧастиИД[0];
	
	Возврат Результат;
	
КонецФункции

Функция УзлыПланаОбмена(ИмяПланаОбмена) Экспорт
	
	Результат = Неопределено;
	ПустойРезультат = Неопределено;
	
	Попытка
		ЭтотУзелПланаОбмена = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	Исключение
		// Разделенный режим, пропускаем.
		Возврат ПустойРезультат;
	КонецПопытки;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Код КАК Код,
	|	Т.Наименование КАК Наименование,
	|	Т.НомерОтправленного КАК НомерОтправленного,
	|	Т.НомерПринятого КАК НомерПринятого
	|ИЗ
	|	ПланОбмена.%1 КАК Т
	|ГДЕ
	|	Т.Ссылка <> &ЭтотУзелПланаОбмена";
	
	ТекстЗапроса = ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяПланаОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЭтотУзелПланаОбмена", ЭтотУзелПланаОбмена);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Граница = ТЗ.Количество() - 1;
	
	Для ОбрИндекс = 0 По Граница Цикл
		
		стр_ТЗ = ТЗ[0];
		
		Попытка
			ЭтотУзелПланаОбмена = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
		Исключение
			ТЗ.Удалить(стр_ТЗ);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Результат = ТЗ;
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектБазыЗарегистрированНаУзлеПланаОбмена(ОбъектБазы, УзелПланаОбмена) Экспорт
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	Попытка
		Результат = ПланыОбмена.ИзменениеЗарегистрировано(УзелПланаОбмена, ОбъектБазы);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция НомерВерсииОбработки() Экспорт
	
	Возврат "2.0.19.0804";
	
КонецФункции

Функция ЭтоВнешняяОбработка() Экспорт
	
	Возврат (Метаданные.НайтиПоТипу(ТипЗнч(ЭтотОбъект)) = Неопределено);
	
КонецФункции

Функция ТипХранилищеЗначения() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ХранилищеЗначения"));
	
	Результат = Новый ОписаниеТипов(МассивТипов);
	
	Возврат Результат;
	
КонецФункции

// Определяет тип источника элементов извлекая его из имени списка.
//
// Параметры:
//	ИмяСпискаЭлементов - Строка, имя списка элементов, например "Список_777_РегистрыСведений_777_РегистрСведений_777_ЦеныНоменклатуры_777_2".
//
// Возвращаемое значение:
//	Строка, имя типа источника данных списка элементов, например: "РегистрСведений.ЦеныНоменклатуры".
//
Функция ТипИсточникаДанныхСпискаЭлементов(ИмяСпискаЭлементов) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяСпискаЭлементов) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	РЧИ = Система_РазделительЧастейИмен;
	
	ЧастиИмени = РазложитьСтрокуВМассивПодстрок(ИмяСпискаЭлементов, РЧИ);
	
	Результат = ЧастиИмени[2];
	
	Возврат Результат;
	
КонецФункции

Функция ВсеКоллекцииОбъектовМетаданных()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяКоллекции");
	Результат.Колонки.Добавить("ИмяЭлементаКоллекции");
	Результат.Колонки.Добавить("СинонимКоллекции");
	Результат.Колонки.Добавить("НомерКартинки");
	
	// Общие
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.Подсистемы", "Подсистема", "Подсистемы", 20);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеМодули", "ОбщийМодуль", "Общие модули", 21);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПараметрыСеанса", "ПараметрСеанса", "Параметры сеанса", 22);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.Роли", "Роль", "Роли", 23);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеРеквизиты", "ОбщийРеквизит", "Общие реквизиты", 24);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПланыОбмена", "ПланОбмена", "Планы обмена", 25);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.КритерииОтбора", "КритерийОтбора", "Критерии отбора", 26);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПодпискиНаСобытия", "ПодпискаНаСобытие", "Подписки на события", 27);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.РегламентныеЗадания", "РегламентноеЗадание", "Регламентные задания", 28);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ФункциональныеОпции", "ФункциональнаяОпция", "Функциональные опции", 29);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПараметрыФункциональныхОпций", "ПараметрФункциональнойОпции", "Параметры функциональных опций", 30);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОпределяемыеТипы", "ОпределяемыйТип", "Определяемые типы", 31);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ХранилищаНастроек", "ХранилищеНастроек", "Хранилища настроек", 32);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеФормы", "ОбщаяФорма", "Общие формы", 33);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеКоманды", "ОбщаяКоманда", "Общие команды", 34);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ГруппыКоманд", "ГруппаКоманд", "Группы команд", 35);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеМакеты", "ОбщийМакет", "Общие макеты", 36);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ОбщиеКартинки", "ОбщаяКартинка", "Общие картинки", 37);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ПакетыXDTO", "ПакетXDTO", "XDTO-пакеты", 38);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.WebСервисы", "WebСервис", "Web-сервисы", 39);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.HTTPСервисы", "HTTPСервис", "HTTP-сервисы", 40);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.WSСсылки", "WSСсылка", "WS-ссылки", 41);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.ЭлементыСтиля", "ЭлементСтиля", "Элементы стиля", 42);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Общие.Языки", "Язык", "Языки", 43);
	
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Константы", "Константа", "Константы", 3);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Справочники", "Справочник", "Справочники", 4);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Документы", "Документ", "Документы", 5);
	//ДобавитьЗаписьОписанияКоллекцииОМ(Результат, "Документы.НумераторыДокументов", "НумераторДокументов", "Нумераторы");
	//ДобавитьЗаписьОписанияКоллекцииОМ(Результат, "Документы.Последовательности", "Последовательность", "Последовательности");
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ЖурналыДокументов", "ЖурналДокументов", "Журналы документов", 6);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Перечисления", "Перечисление", "Перечисления", 7);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Отчеты", "Отчет", "Отчеты", 8);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Обработки", "Обработка", "Обработки", 9);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ПланыВидовХарактеристик", "ПланВидовХарактеристик", "Планы видов характеристик", 10);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ПланыСчетов", "ПланСчетов", "Планы счетов", 11);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ПланыВидовРасчета", "ПланВидовРасчета", "Планы видов расчета", 12);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "РегистрыСведений", "РегистрСведений", "Регистры сведений", 13);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "РегистрыНакопления", "РегистрНакопления", "Регистры накопления", 14);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "РегистрыБухгалтерии", "РегистрБухгалтерии", "Регистры бухгалтерии", 15);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "РегистрыРасчета", "РегистрРасчета", "Регистры расчета", 16);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "БизнесПроцессы", "БизнесПроцесс", "Бизнес-процессы", 17);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "Задачи", "Задача", "Задачи", 18);
	ДобавитьЗаписьОписанияКоллекцииОбъектаМетаданных(Результат, "ВнешниеИсточникиДанных", "ВнешнийИсточникДанных", "Внешние источники данных", 19);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоНавигационнаяСсылка(Знач АдресСсылки)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(АдресСсылки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	АдресСсылки = СокрЛП(АдресСсылки);
	
	МаркерНвСсылки = "e1cib";
	
	Если ВРег(Лев(АдресСсылки, СтрДлина(МаркерНвСсылки))) = ВРег(МаркерНвСсылки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИмяСвойстваГлобальногоКонтекста(ИмяТипаОбъекта)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяТипаОбъекта) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = мСоответствиеИменСвойствТиповКоллекций.Получить(ИмяТипаОбъекта);
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоЭлементовКоллекцииТипаОбъектаМетаданныхЗапрос(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных)
	
	Результат = Новый Запрос;
	ПустойРезультат = Неопределено;
	
	ТекстЗапроса = КоличествоЭлементовКоллекцииТипаОбъектаМетаданныхТекстЗапроса(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Результат.Текст = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоЭлементовКоллекцииТипаОбъектаМетаданныхТекстЗапроса(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных)
	
	Результат = "";
	ПустойРезультат = "";
	
	ИмяОсновнойТаблицы = ИмяОсновнойТаблицыЭлементовОбъектаМетаданных(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);
	
	Если Не ЗначениеЗаполнено(ИмяОсновнойТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Результат = ПодставитьПараметрыВСтроку("ВЫБРАТЬ КОЛИЧЕСТВО(*) КАК КоличествоЭлементов ИЗ %1 КАК Т", ИмяОсновнойТаблицы);
	
	Возврат Результат;
	
КонецФункции

// Имя базового типа по переданному значению объекта метаданных.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных, объект метаданных, по которому необходимо определить базовый тип.
// 
// Возвращаемое значение:
//	Строка - имя базового типа по переданному значению объекта метаданных.
//
// Пример:
//	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.Справочники.Номенклатура); "Справочники".
//
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Документы";
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат "Справочники";
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат "Перечисления";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыСведений";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыНакопления";
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыБухгалтерии";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыРасчета";
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыОбмена";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыВидовХарактеристик";
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат "БизнесПроцессы";
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат "Задачи";
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыСчетов";
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыВидовРасчета";
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Константы";
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ЖурналыДокументов";
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат "Последовательности";
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегламентныеЗадания";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель())
		И ОбъектМетаданных.Родитель().Перерасчеты.Найти(ОбъектМетаданных.Имя) = ОбъектМетаданных Тогда
		Возврат "Перерасчеты";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ИмяТипаОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если (ОбъектМетаданных = Неопределено) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Документ";
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат "Справочник";
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат "Перечисление";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрСведений";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрНакопления";
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрБухгалтерии";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрРасчета";
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланОбмена";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланВидовХарактеристик";
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат "БизнесПроцесс";
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат "Задача";
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланСчетов";
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланВидовРасчета";
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Константа";
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ЖурналДокументов";
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат "Последовательность";
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегламентноеЗадание";
		
	ИначеЕсли Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
		Возврат "Обработка";
		
	ИначеЕсли Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		Возврат "Отчет";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель())
		И ОбъектМетаданных.Родитель().Перерасчеты.Найти(ОбъектМетаданных.Имя) = ОбъектМетаданных Тогда
		Возврат "Перерасчет";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

#Область ОбновлениеОбработки

Функция ПараметрыПолученияОбновлений() Экспорт
	
	Результат = Новый Структура("ПинКод, КодАктивации", "", "");
	ПустойРезультат = Неопределено;
	
	Макет = ПолучитьМакет("ПараметрыПолученияОбновлений");
	СтрокаЛогинПароль = Макет.ПолучитьТекст();
	
	Если Не ЗначениеЗаполнено(СтрокаЛогинПароль) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	ЧастиСтроки = РазложитьСтрокуВМассивПодстрок(СтрокаЛогинПароль, "~");
	
	Результат.ПинКод       = СокрЛП(ЧастиСтроки[0]);
	Результат.КодАктивации = СокрЛП(ЧастиСтроки[1]);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецОбласти

#Область Библиотеки

#Область СтроковыеФункции

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Позиция = Найти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		
		Позиция = Найти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
//
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено,
	Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено,
	Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено,
	Знач Параметр9 = Неопределено)
	
	Результат = "";
	
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//	СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//	Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//	Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//	ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//	В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//	рекомендуется использовать функцию платформы СтрШаблон.
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки, Знач Параметр1,
	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено,
	Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено,
	Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = Найти(Параметр1, "%")
	Или Найти(Параметр2, "%") Или Найти(Параметр3, "%")
	Или Найти(Параметр4, "%") Или Найти(Параметр5, "%")
	Или Найти(Параметр6, "%") Или Найти(Параметр7, "%")
	Или Найти(Параметр8, "%") Или Найти(Параметр9, "%");
	
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
	
КонецФункции

Функция СтрокаИзМассиваПодстрок(Знач ЧастиСтроки, Знач Разделитель = "",
	ПропускатьПустыеСтроки = Ложь, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если ЧастиСтроки.Количество() = 0 Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Для каждого ЧастьСтроки Из ЧастиСтроки Цикл
		
		Если СокращатьНепечатаемыеСимволы Тогда
			ЧастьСтроки = СокрЛП(ЧастьСтроки);
		КонецЕсли;
		
		Если ПропускатьПустыеСтроки Тогда
			Если Не ЗначениеЗаполнено(ЧастьСтроки) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Результат = Результат + ЧастьСтроки + Разделитель;
		
	КонецЦикла;
	
	Если СтрДлина(Разделитель) > 0 Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - СтрДлина(Разделитель));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти

#Область ОбщегоНазначения

// Структура, содержащая значения реквизитов, прочитанные из информационной базы по ссылке на объект.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//                       требований к свойствам структуры.
//                       Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                       псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                       значения (опционально) фактическое имя поля в таблице.
//                       Если ключ задан, а значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                       к свойствам структуры.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                    - если есть ограничение на уровне записей, то все реквизиты вернутся 
//                                      со значением Неопределено;
//                                    - если нет прав для работы с таблицей, то возникнет исключение.
//                              - если Ложь, то возникнет исключение при отсутствии прав на таблицу 
//                                или любой из реквизитов.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//            - если в параметр Реквизиты передана пустая строка, то возвращается пустая структура.
//            - если в параметр Ссылка передана пустая ссылка, то возвращается структура, 
//              соответствующая именам реквизитов со значениями Неопределено.
//            - если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//              то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	
	// Если передано имя предопределенного. 
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда 
		
		ПолноеИмяПредопределенногоЭлемента = Ссылка;
		
		// Разбор полного имени предопределенного.
		//ЧастиПолногоИмени = СтрРазделить(ПолноеИмяПредопределенногоЭлемента, ".");
		ЧастиПолногоИмени = РазложитьСтрокуВМассивПодстрок(ПолноеИмяПредопределенногоЭлемента, ".");
		ПолноеИмяОбъектаМетаданных = ЧастиПолногоИмени[0] + "." + ЧастиПолногоИмени[1];
		
		// Если предопределенный не создан в ИБ, то требуется выполнить проверку доступа к объекту.
		// В других сценариях проверка доступа выполняется в момент исполнения запроса.
		Если Ссылка = Неопределено Тогда 
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
			
			Если Не ПравоДоступа("Чтение", МетаданныеОбъекта) Тогда 
				ВызватьИсключение ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Недостаточно прав для работы с таблицей ""%1""'"), ПолноеИмяОбъектаМетаданных);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Если передана ссылка.
		
		Попытка
			ПолноеИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя(); 
		Исключение
			ВызватьИсключение НСтр("ru = 'Неверный первый параметр Ссылка: 
			                             |- Значение должно быть ссылкой или именем предопределенного элемента'");	
		КонецПопытки;
		
	КонецЕсли;
	
	// Разбор реквизитов, если второй параметр Строка.
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
		// Удаление пробелов.
		Реквизиты = СтрЗаменить(Реквизиты, " ", "");
		// Преобразование параметра в массив полей.
		//Реквизиты = СтрРазделить(Реквизиты, ",");
		Реквизиты = РазложитьСтрокуВМассивПодстрок(Реквизиты, ",");
	КонецЕсли;
	
	// Приведение реквизитов к единому формату.
	СтруктураПолей = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		
		СтруктураПолей = Реквизиты;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого Реквизит Из Реквизиты Цикл
			
			Попытка
				ПсевдонимПоля = СтрЗаменить(Реквизит, ".", "");
				СтруктураПолей.Вставить(ПсевдонимПоля, Реквизит);
			Исключение 
				// Если псевдоним не является ключом.
				
				// Не удалось распознать ошибку, проброс первичной ошибки.
				ВызватьИсключение;
			
			КонецПопытки;
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	// Подготовка результата (после выполнения запроса переопределится).
	Результат = Новый Структура;
	
	// Формирование текста запроса к выбираемым полям.
	ТекстЗапросаПолей = "";
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		
		ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
						КлючИЗначение.Значение,
						КлючИЗначение.Ключ);
		ПсевдонимПоля = КлючИЗначение.Ключ;
		
		ТекстЗапросаПолей = 
			ТекстЗапросаПолей + ?(ПустаяСтрока(ТекстЗапросаПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + ПсевдонимПоля;
		
		
		// Предварительное добавление поля по псевдониму в возвращаемый результат.
		Результат.Вставить(ПсевдонимПоля);
		
	КонецЦикла;
	
	// Если предопределенного нет в ИБ.
	// - приведение результата к отсутствию объекта в ИБ или передаче пустой ссылки.
	Если Ссылка = Неопределено Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|" + ТекстЗапросаПолей + "
		|ИЗ
		|	" + ПолноеИмяОбъектаМетаданных + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|";
	
	// Выполнение запроса.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		
		// Если реквизиты были переданы строкой, то они уже конвертированы в массив.
		// Если реквизиты - массив, оставляем без изменений.
		// Если реквизиты - структура - конвертируем в массив.
		// В остальных случаях уже было бы выброшено исключение.
		Если Тип("Структура") = ТипЗнч(Реквизиты) Тогда
			Реквизиты = Новый Массив;
			Для каждого КлючИЗначение Из СтруктураПолей Цикл
				ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
							КлючИЗначение.Значение,
							КлючИЗначение.Ключ);
				Реквизиты.Добавить(ИмяПоля);
			КонецЦикла;
		КонецЕсли;
		
		// Не удалось распознать ошибку, проброс первичной ошибки.
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Заполнение реквизитов.
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Значение реквизита, прочитанного из информационной базы по ссылке на объект.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  ИмяРеквизита       - Строка - имя получаемого реквизита.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                    - если есть ограничение на уровне записей, то возвращается Неопределено;
//                                    - если нет прав для работы с таблицей, то возникнет исключение.
//                              - если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
//               - если в параметр Ссылка передана пустая ссылка, то возвращается Неопределено.
//               - если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//                 то возвращается Неопределено.
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда 
		ВызватьИсключение НСтр("ru = 'Неверный второй параметр ИмяРеквизита: 
		                             |- Имя реквизита должно быть заполнено'");
	КонецЕсли;
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Значения реквизитов, прочитанные из информационной базы для нескольких объектов.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок на объекты одного типа.
//                          Значения массива должны быть ссылками на объекты одного типа.
//                          если массив пуст, то результатом будет пустое соответствие.
//  ИменаРеквизитов - Строка - имена реквизитов перечисленные через запятую, в формате требований к свойствам
//                             структуры. Например, "Код, Наименование, Родитель".
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объектам выполняется с учетом прав пользователя, и в случае,
//                                    - если какой-либо объект будет исключен из выборки по правам, то этот объект
//                                      будет исключен и из результата;
//                              - если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//
// Возвращаемое значение:
//  Соответствие - список объектов и значений их реквизитов:
//   * Ключ - ЛюбаяСсылка - ссылка на объект;
//   * Значение - Структура - значения реквизитов:
//    ** Ключ - Строка - имя реквизита;
//    ** Значение - Произвольный - значение реквизита.
// 
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов, ВыбратьРазрешенные = Ложь) Экспорт
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда 
		ВызватьИсключение НСтр("ru = 'Неверный второй параметр ИменаРеквизитов: 
		                             |- Поле объекта должно быть указано'");
	КонецЕсли;
	
	Если Найти(ИменаРеквизитов, ".") <> 0 Тогда 
		ВызватьИсключение НСтр("ru = 'Неверный второй параметр ИменаРеквизитов: 
		                             |- Обращение через точку не поддерживается'");
	КонецЕсли;
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	ПерваяСсылка = МассивСсылок[0];
	
	Попытка
		ПолноеИмяОбъектаМетаданных = ПерваяСсылка.Метаданные().ПолноеИмя();
	Исключение
		ВызватьИсключение НСтр("ru = 'Неверный первый параметр МассивСсылок: 
		                             |- Значения массива должны быть ссылками'");
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Ссылка КАК Ссылка, " + ИменаРеквизитов + "
		|ИЗ
		|	" + ПолноеИмяОбъектаМетаданных + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		
		// Удаление пробелов.
		ИменаРеквизитов = СтрЗаменить(ИменаРеквизитов, " ", "");
		// Преобразование параметра в массив полей.
		//ИменаРеквизитов = СтрРазделить(ИменаРеквизитов, ",");
		ИменаРеквизитов = РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",");
		
		// Не удалось распознать ошибку, проброс первичной ошибки.
		ВызватьИсключение;
		
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		Результат = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

// Значения реквизита, прочитанного из информационной базы для нескольких объектов.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  МассивСсылок       - Массив - массив ссылок на объекты одного типа.
//                                Значения массива должны быть ссылками на объекты одного типа.
//  ИмяРеквизита       - Строка - например, "Код".
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объектам выполняется с учетом прав пользователя, и в случае,
//                                    - если какой-либо объект будет исключен из выборки по правам, то этот объект
//                                      будет исключен и из результата;
//                              - если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на объект, Значение - значение прочитанного реквизита.
//      * Ключ     - ссылка на объект, 
//      * Значение - значение прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда 
		ВызватьИсключение НСтр("ru = 'Неверный второй параметр ИмяРеквизита: 
		                             |- Имя реквизита должно быть заполнено'");
	КонецЕсли;
	
	ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные);
	Для каждого Элемент Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[Элемент.Ключ] = Элемент.Значение[ИмяРеквизита];
	КонецЦикла;
		
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ЭтоПредопределенныйЭлемент(ОбъектИлиСсылка) Экспорт
	
	ЭтоПредопределенный = Ложь;
	
	Попытка
		ЭтоПредопределенный = ОбъектИлиСсылка.Предопределенный
	Исключение
		ЭтоПредопределенный = Ложь
	КонецПопытки;
	
	Возврат ЭтоПредопределенный;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОпределениеТиповОбъектовМетаданных

#Область СсылочныеТипыДанных

// Определяет принадлежность объекта метаданных к общему типу "Документ".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к документам.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является документом.
//
Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Документы.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Справочник".
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//	Булево - Истина, если объект является справочником.
//
Функция ЭтоСправочник(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Перечисление".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является перечислением.
//
Функция ЭтоПеречисление(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Перечисления.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План обмена".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом обмена.
//
Функция ЭтоПланОбмена(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов характеристик".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом видов характеристик.
//
Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Бизнес-процесс".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является бизнес-процессом.
//
Функция ЭтоБизнесПроцесс(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Задача".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является задачей.
//
Функция ЭтоЗадача(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Задачи.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План счетов".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом счетов.
//
Функция ЭтоПланСчетов(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов расчета".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом видов расчета.
//
Функция ЭтоПланВидовРасчета(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область Регистры

// Определяет принадлежность объекта метаданных к общему типу "Регистр сведений".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром сведений.
//
Функция ЭтоРегистрСведений(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Регистр накопления".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром накопления.
//
Функция ЭтоРегистрНакопления(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Регистр бухгалтерии".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром бухгалтерии.
//
Функция ЭтоРегистрБухгалтерии(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Регистр расчета".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром расчета.
//
Функция ЭтоРегистрРасчета(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область Константы

// Определяет принадлежность объекта метаданных к общему типу "Константа".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является константой.
//
Функция ЭтоКонстанта(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Константы.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область ЖурналыДокументов

// Определяет принадлежность объекта метаданных к общему типу "Журнал документов".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является журналом документов.
//
Функция ЭтоЖурналДокументов(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область Последовательности

// Определяет принадлежность объекта метаданных к общему типу "Последовательности".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является последовательностью.
//
Функция ЭтоПоследовательность(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Последовательности.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Определяет принадлежность объекта метаданных к общему типу "Регламентные задания".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регламентным заданием.
//
Функция ЭтоРегламентноеЗадание(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область Общие

// Определяет принадлежность объекта метаданных к типу регистр.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является каким-либо регистром.
//
Функция ЭтоРегистр(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
	Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
	Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
	Или Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоПодсистема(ОбъектМд) Экспорт
	
	Результат = Метаданные.Подсистемы.Содержит(ОбъектМд);
	Возврат Результат;
	
КонецФункции

Функция ЭтоОбщийМодуль(ОбъектМд) Экспорт
	
	Результат = Метаданные.ОбщиеМодули.Содержит(ОбъектМд);
	Возврат Результат;
	
КонецФункции

Функция ЭтоПараметрСеанса(ОбъектМд) Экспорт
	
	Результат = Метаданные.ПараметрыСеанса.Содержит(ОбъектМд);
	Возврат Результат;
	
КонецФункции

Функция ЭтоОтчет(ОбъектМд) Экспорт
	
	Результат = Метаданные.Отчеты.Содержит(ОбъектМд);
	Возврат Результат;
	
КонецФункции

Функция ЭтоОбработка(ОбъектМд) Экспорт
	
	Результат = Метаданные.Обработки.Содержит(ОбъектМд);
	Возврат Результат;
	
КонецФункции

Функция ЭтоВнешнийИсточникДанных(ОбъектМд) Экспорт
	
	Результат = Метаданные.ВнешниеИсточникиДанных.Содержит(ОбъектМд);
	Возврат Результат;
	
КонецФункции

// Определяет принадлежность объекта метаданных к ссылочному типу.
//
// Параметры:
//	ОбъектМд - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
//
// Возвращаемое значение:
//	Булево - Истина, если объект ссылочного типа.
//
Функция ЭтоОбъектСсылочногоТипа(ОбъектМд) Экспорт
	
	ИмяОбъектаМетаданных = ОбъектМд.ПолноеИмя();
	
	Позиция = Найти(ИмяОбъектаМетаданных, ".");
	
	Если Позиция > 0 Тогда
		
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		
		ЭтоСсылочныйТип = 
			(ИмяБазовогоТипа = "Справочник" Или ИмяБазовогоТипа = "Документ"
			Или ИмяБазовогоТипа = "БизнесПроцесс" Или ИмяБазовогоТипа = "Задача"
			Или ИмяБазовогоТипа = "ПланСчетов" Или ИмяБазовогоТипа = "ПланОбмена"
			Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
			Или ИмяБазовогоТипа = "ПланВидовРасчета");
		
		Возврат ЭтоСсылочныйТип;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Типы

Функция Тип_СтруктураМетаданныхКонфигурации() Экспорт
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("ТипЗаписи");            // Тип записи структуры МД конфигурации (например: "КоллекцияОбъектовМетаданных", "ОбъектМетаданных").
	Результат.Колонки.Добавить("ИмяКоллекции");         // Имя коллекции (например: "Справочники").
	Результат.Колонки.Добавить("ИмяЭлементаКоллекции"); // Имя элемента коллекции (например: "Справочник").
	Результат.Колонки.Добавить("Имя");                  // Имя объекта МД (например: "Номенклатура").
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Синоним");              // Синоним имени объекта МД (например: "Номенклатура").
	Результат.Колонки.Добавить("Комментарий");          // Имя объекта МД (например: "Номенклатура").
	Результат.Колонки.Добавить("КоличествоЗаписей");    // Количество записей элементов данного вида (например: количество записей в справочнике).
	Результат.Колонки.Добавить("НомерКартинки");
	Результат.Колонки.Добавить("ПолноеИмя");            // Полное имя объекта метаданных.
	Результат.Колонки.Добавить("НеОтображать");
	Результат.Колонки.Добавить("ИмяФормы");             // Имя формы
	
	Возврат Результат;
	
КонецФункции

Функция Тип_ЗаписьСтруктурыМетаданныхКонфигурации() Экспорт
	
	Результат = Новый Структура;
	
	СтруктураМетаданныхКонфигурации = Тип_СтруктураМетаданныхКонфигурации();
	
	Для Каждого Колонка Из СтруктураМетаданныхКонфигурации.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Тип_СвойстваОбъектаОбработкиДанных() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяКоллекции");
	Результат.Вставить("ИмяЭлементаКоллекции");
	Результат.Вставить("Имя");
	
	Возврат Результат;
	
КонецФункции

Функция Тип_ПоляСубконтоСпискаРегистраБухгалтерии() Экспорт
	
	Результат = Новый Структура("ВидСубконто, Субконто");
	
	Результат.ВидСубконто = Новый Структура("Дт, Кт, ГруппаДт, ГруппаКт", Новый Массив(), Новый Массив(), Неопределено, Неопределено);
	Результат.Субконто = Новый Структура("Дт, Кт, ГруппаДт, ГруппаКт", Новый Массив(), Новый Массив(), Неопределено, Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция Тип_ПараметрыТаблицыПоИмениКоманды()
	
	Результат = Новый Структура("ТипТаблицы, ИмяТаблицы");
	Результат.Вставить("ТипТаблицы", "");
	Результат.Вставить("ИмяТаблицы", "");
	
	Возврат Результат;
	
КонецФункции

Функция Тип_ПоляРегистраБухгалтерииДтКт()
	
	Результат = Новый Структура;
	Результат.Вставить("Измерения", Новый Массив);
	Результат.Вставить("Ресурсы", Новый Массив);
	Результат.Вставить("Счета", Новый Массив);
	Результат.Вставить("МаксКоличествоСубконто", 0);
	
	Возврат Результат;
	
КонецФункции

Функция Тип_СвойстваПользователяИнформационнойБазы(ИмяСвойства = "", СинонимСвойства = "", КомментарийСвойства = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", ИмяСвойства);
	Результат.Вставить("Синоним", СинонимСвойства);
	Результат.Вставить("Комментарий", КомментарийСвойства);
	
	Возврат Результат;
	
КонецФункции

Функция Тип_ПараметрыКолонкиСпискаЭлементовОбъектаМетаданных(ИмяРеквизита = "", Синоним = "", Комментарий = "", ТипЗначенияКолонки = Неопределено, Видимость = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", ИмяРеквизита);
	Результат.Вставить("Синоним", Синоним);
	Результат.Вставить("Комментарий", Комментарий);
	Результат.Вставить("Видимость", Видимость);
	
	ПредставлениеТипа = СтрокаОписанияТипов(ТипЗначенияКолонки);
	Результат.Вставить("ПредставлениеТипа", ПредставлениеТипа);
	
	Возврат Результат;
	
КонецФункции

Функция Тип_ПараметрыФормированияСтруктурыМетаданных() Экспорт
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Отбор", Новый Массив);
	
	//
	
	Результат = ПараметрыФормирования;
	
	Возврат Результат;
	
КонецФункции

Функция Тип_ОтборФормированияСтруктурыМетаданных(ИмяПоля, ЗначениеОтбора) Экспорт
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяПоля) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяПоля",        ИмяПоля);
	Результат.Вставить("ЗначениеОтбора", ЗначениеОтбора);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Система_РазделительЧастейИмен = "_777_";

ЗаполнитьСоответствиеКартинок();
ЗаполнитьСоответствиеИменСвойствТиповКоллекций();
ЗаполнитьТаблицыСтруктурыМетаданных();